%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: DPHLogo_White.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sheila Erimez
%%CreationDate: 9/25/12
%%BoundingBox: 0 0 71 72
%%HiResBoundingBox: 0 0 70.8599 71.9996
%%CropBox: 0 0 70.8599 71.9996
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">dph_logo_blue</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2012-09-25T17:32:55-04:00</xap:CreateDate>
         <xap:ModifyDate>2012-09-25T17:32:55-04:00</xap:ModifyDate>
         <xap:MetadataDate>2012-09-25T17:32:55-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>252</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:85F3C040C908E211B50CF1A77209B1D1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:86F3C040C908E211B50CF1A77209B1D1</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:82F3C040C908E211B50CF1A77209B1D1</stRef:instanceID>
            <stRef:documentID>uuid:421EF50BC108E211B50CF1A77209B1D1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1.250000</stDim:w>
            <stDim:h>1.250000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 281 PC</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>85.000000</xapG:magenta>
                           <xapG:yellow>5.000000</xapG:yellow>
                           <xapG:black>20.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 281 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>72.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>32.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -71.9995 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 71.9995 li
70.8599 71.9995 li
70.8599 0 li
cp
clp
[1 0 0 1 0 0 ]ct
41.938 46.8433 mo
41.938 46.8433 37.8364 50.2593 36.5552 50.5161 cv
36.5552 50.5161 39.3755 48.6362 41.938 43.5112 cv
41.938 43.5112 44.1587 45.1343 41.938 46.8433 cv
cp
43.2192 51.7974 mo
43.2192 51.7974 41.8521 54.1899 37.4946 56.0688 cv
37.4946 56.0688 39.2896 53.9331 39.4595 51.7974 cv
43.2192 51.7974 li
cp
44.2446 51.9683 mo
44.2446 51.9683 42.7915 54.8726 37.4106 56.4956 cv
37.4106 56.4956 41.8521 54.7026 43.561 51.9683 cv
44.2446 51.9683 li
cp
36.5552 55.812 mo
36.5552 55.812 35.7012 55.812 35.0176 55.1294 cv
35.0176 55.1294 33.9072 54.019 33.8213 52.1392 cv
28.1836 51.4556 li
39.2036 51.4556 li
39.2036 51.4556 38.8618 54.7026 36.5552 55.812 cv
cp
38.2642 59.1021 mo
34.9326 59.1021 li
34.9326 59.1021 35.8721 58.2046 35.9575 57.0093 cv
35.9575 57.0093 37.0688 58.5894 38.2642 59.1021 cv
cp
36.1704 63.7144 mo
36.1704 63.7144 35.4023 64.6548 34.8037 64.5269 cv
34.7188 62.8608 li
34.7188 62.8608 35.9575 62.8179 36.1704 62.8179 cv
36.1704 63.7144 li
cp
34.292 59.4429 mo
36.0864 59.4429 li
36.1274 60.2983 li
36.1274 60.2983 35.0605 60.4263 34.334 60.0845 cv
34.292 59.4429 li
cp
31.6436 58.8452 mo
31.6436 58.8452 30.832 57.9917 31.8994 56.1118 cv
31.8994 56.1118 33.3516 56.6245 34.1631 56.7095 cv
34.1631 56.7095 33.6934 58.3755 31.6436 58.8452 cv
cp
24.5098 22.0679 mo
44.5864 22.0679 li
44.5864 22.0679 44.9282 43.3394 35.0176 50.8579 cv
35.0176 50.8579 24.5957 44.6636 24.5098 22.0679 cv
cp
23.5703 30.8667 mo
23.5703 30.8667 23.9121 34.5405 24.168 34.8823 cv
24.168 34.8823 22.1182 34.1128 23.5703 30.8667 cv
cp
31.7715 13.6958 mo
33.6563 12.6758 li
33.6563 12.6758 34.5107 14.6406 35.1943 14.2993 cv
38.354 12.0781 li
38.27 13.7012 li
38.27 13.7012 34.9375 15.8369 34.7666 16.6055 cv
34.7666 16.6055 34.5107 19.1685 35.4502 19.7661 cv
35.7061 20.5356 li
32.5459 20.5356 li
31.7715 13.6958 li
cp
30.5752 9.33887 mo
30.4043 8.14258 li
32.8818 7.20313 li
33.0527 8.74072 li
30.5752 9.33887 li
cp
35.3594 11.9873 mo
35.4453 11.731 li
37.7505 11.8164 37.0688 12.3291 37.0688 12.3291 cv
35.9575 13.0122 li
35.3594 12.585 li
35.3594 11.9873 li
cp
39.8872 12.8413 mo
39.8872 12.8413 45.8452 15.3188 39.0864 20.4448 cv
36.2251 20.4448 li
36.1704 16.8994 li
39.7173 14.3794 li
39.8872 12.8413 li
cp
26.7314 50.6011 mo
24.4668 50.3022 26.4316 47.0991 26.4316 47.0991 cv
26.2607 47.6968 26.7314 48.7222 26.7314 48.7222 cv
27.0303 48.7222 27.4141 47.5269 27.4141 47.5269 cv
27.5 47.9106 27.9697 49.1919 27.9697 49.1919 cv
27.8418 50.8149 26.7314 50.6011 26.7314 50.6011 cv
cp
25.3643 14.9771 mo
24.9775 15.3452 24.7168 15.3652 24.5098 15.1479 cv
24.3027 14.9307 24.2275 14.5581 24.6143 14.1899 cv
25.001 13.8218 25.4824 13.6992 25.6895 13.917 cv
25.8965 14.1343 25.751 14.6089 25.3643 14.9771 cv
cp
46.4653 44.4507 mo
46.4653 41.2476 43.647 40.2222 43.647 40.2222 cv
46.4653 34.0708 46.5503 20.4448 46.5503 20.4448 cv
43.9888 20.4448 li
45.6528 19.2915 45.9526 16.1304 45.9526 16.1304 cv
46.0806 13.6958 43.647 11.3892 43.647 11.3892 cv
41.2114 8.44189 35.4453 8.44189 35.4453 8.44189 cv
35.5732 7.28857 li
32.626 6.51953 li
29.6787 7.80127 li
29.9346 9.72314 li
26.0479 10.4492 25.0654 11.5171 25.0654 11.5171 cv
20.751 15.4897 21.7334 18.5649 21.7334 18.5649 cv
20.8359 20.9995 19.042 20.8716 19.042 20.8716 cv
19.7256 21.2983 20.4092 20.8716 20.4092 20.8716 cv
20.751 21.9819 li
20.4092 21.2983 22.374 19.3335 22.374 19.3335 cv
26.9873 19.8462 30.917 14.3794 30.917 14.3794 cv
31.8564 20.6157 li
22.8008 20.6157 li
22.5449 21.9819 23.0576 27.1079 23.0576 27.1079 cv
19.042 29.6704 19.8115 33.1733 19.8115 33.1733 cv
20.1533 38.6421 25.6201 39.1538 25.6201 39.1538 cv
28.8672 47.8677 33.9072 50.9858 33.9072 50.9858 cv
27.6602 50.9858 li
28.6533 50.4409 28.3965 48.6792 28.3965 48.6792 cv
28.4609 46.8218 27.6279 45.604 27.6279 45.604 cv
27.6279 46.5015 27.2432 46.6294 27.2432 46.6294 cv
26.4746 44.5786 li
26.0898 46.7573 25.5781 47.6538 25.5781 47.6538 cv
24.4248 50.6011 26.3467 51.1147 26.3467 51.1147 cv
24.8086 51.1147 li
25.4492 52.5239 28.7813 54.5737 28.7813 54.5737 cv
26.9873 58.0347 29.166 60.4683 29.166 60.4683 cv
31.0879 63.0317 34.1631 62.7749 34.1631 62.7749 cv
34.8037 65.979 li
36.7271 65.979 li
36.854 62.7749 li
39.5454 62.7749 40.8267 63.4155 40.8267 63.4155 cv
42.1079 64.1851 li
43.9028 64.5698 42.7485 63.2886 42.7485 63.2886 cv
41.0825 60.853 36.9829 60.4683 36.9829 60.4683 cv
36.9829 59.3159 li
40.0591 59.3159 li
38.0083 58.5464 37.2388 57.0093 37.2388 57.0093 cv
43.1333 55.5991 45.5679 50.8579 45.5679 50.8579 cv
41.5962 50.8579 li
46.7212 47.7827 46.4653 44.4507 46.4653 44.4507 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
52.3911 11.7681 mo
52.3911 11.7681 56.2358 14.0747 56.8765 14.9717 cv
56.8765 14.9717 58.7983 16.5098 59.311 20.6099 cv
59.311 20.6099 57.5171 19.0718 55.0825 17.2783 cv
55.0825 17.2783 53.8013 16.5098 52.3911 11.7681 cv
cp
f
54.5278 18.4746 mo
54.5278 18.4746 55.8091 21.4644 55.8091 21.9771 cv
55.8091 21.9771 56.4927 23.9419 59.7388 26.4194 cv
59.7388 26.4194 60.9341 27.4448 61.5327 29.3237 cv
61.5327 29.3237 62.4722 27.188 62.814 24.7964 cv
62.814 24.7964 64.0103 21.6353 60.9341 17.791 cv
60.9341 17.791 60.5073 22.7456 61.02 25.1382 cv
61.02 25.1382 60.2515 23.4292 58.2866 21.5493 cv
58.2866 21.5493 57.4321 21.0376 54.5278 18.4746 cv
cp
f
57.7739 25.9067 mo
57.7739 25.9067 57.688 31.4595 59.7388 33.5952 cv
59.7388 33.5952 61.4468 35.5601 61.8745 37.5249 cv
61.8745 37.5249 62.9849 34.9624 64.0952 33.937 cv
64.0952 33.937 66.5728 31.8013 64.1812 24.9673 cv
64.1812 24.9673 63.6685 28.7261 63.1558 29.6655 cv
63.1558 29.6655 62.2163 32.314 62.0454 32.9976 cv
62.0454 32.9976 61.6177 30.6909 59.7388 28.7261 cv
59.7388 28.7261 58.5425 26.8462 57.7739 25.9067 cv
cp
f
58.6069 33.2964 mo
58.6069 33.2964 59.9946 36.1587 60.4224 38.2085 cv
61.106 41.3696 li
61.106 41.3696 62.3872 38.6362 63.5825 37.269 cv
63.5825 37.269 65.4839 35.2183 66.0601 32.9116 cv
66.0601 32.9116 66.9146 38.2085 63.9243 41.3696 cv
63.9243 41.3696 59.8237 44.2749 59.4819 45.4702 cv
59.4819 45.4702 59.8237 43.7612 59.0552 41.9683 cv
59.0552 41.9683 57.688 39.4897 58.5747 36.436 cv
58.5747 36.436 58.8198 35.2183 58.6069 33.2964 cv
cp
f
55.4673 52.561 mo
55.4673 52.561 56.5776 51.8774 60.1655 50.3394 cv
60.1655 50.3394 64.6938 48.1187 64.9497 41.5405 cv
64.9497 41.5405 64.3521 43.5913 61.7036 45.5562 cv
61.7036 45.5562 59.311 47.521 57.688 49.4858 cv
57.688 49.4858 58.7134 42.5659 57.4321 41.0278 cv
57.4321 41.0278 57.4321 41.9683 55.7231 45.812 cv
55.7231 45.812 55.0825 46.8804 55.5952 49.5708 cv
55.5952 49.5708 55.8091 50.4683 55.4673 52.561 cv
cp
f
49.4448 58.0288 mo
49.4448 58.0288 51.4087 57.2593 56.7915 56.5757 cv
56.7915 56.5757 60.8491 54.9097 61.8745 50.2544 cv
61.8745 50.2544 61.1479 51.9204 56.2358 53.3726 cv
56.2358 53.3726 54.9546 53.6714 52.8188 55.2095 cv
52.8188 55.2095 54.7837 51.2798 54.6978 46.5386 cv
54.6978 46.5386 52.52 49.314 51.7085 51.1948 cv
51.7085 51.1948 50.854 53.8853 50.7261 54.9526 cv
50.7261 54.9526 50.2983 56.7896 49.4448 58.0288 cv
cp
f
37.186 65.9741 mo
37.5708 64.1362 li
37.5708 64.1362 42.4399 61.146 42.9517 61.019 cv
42.9517 61.019 43.8481 60.5054 44.4048 58.6694 cv
44.4048 58.6694 44.5317 55.2515 48.5044 52.519 cv
48.5044 52.519 50.4272 50.4253 50.5122 49.8706 cv
50.5122 49.8706 50.4692 56.5337 46.7104 59.6089 cv
46.7104 59.6089 51.9644 59.3101 52.7759 59.438 cv
52.7759 59.438 54.4849 59.8228 57.9019 57.2163 cv
57.9019 57.2163 53.8442 62.0864 49.7437 62.6851 cv
49.7437 62.6851 47.479 63.0688 44.8735 62.0015 cv
44.8735 62.0015 42.9517 61.8726 41.8833 62.5132 cv
41.8833 62.5132 39.8774 63.0688 37.186 65.9741 cv
cp
f
18.0918 12.8789 mo
18.0918 12.8789 17.5361 13.9468 14.0771 15.9541 cv
14.0771 15.9541 11.5566 17.7056 11.0869 23.0024 cv
11.0869 23.0024 11.6416 22.105 14.4609 19.7554 cv
14.4609 19.7554 17.4082 16.7231 18.0918 12.8789 cv
cp
f
9.89063 19.0718 mo
9.89063 19.0718 5.66211 21.9771 7.88281 27.3589 cv
8.19922 28.269 8.95117 29.1958 9.29297 30.3921 cv
9.29297 30.3921 10.7451 27.8286 13.0518 26.3335 cv
13.0518 26.3335 15.9561 24.1978 15.5713 20.2251 cv
15.5713 20.2251 14.4609 21.3364 11.9834 23.1724 cv
11.9834 23.1724 10.4463 24.7104 9.93359 26.3335 cv
9.93359 26.3335 10.4033 24.2407 10.1895 22.3608 cv
10.1895 22.3608 9.93359 21.1226 9.89063 19.0718 cv
cp
f
6.72949 26.1626 mo
6.72949 26.1626 3.4834 32.8696 7.58398 36.0308 cv
7.58398 36.0308 8.9082 37.3979 9.63477 38.9351 cv
9.63477 38.9351 10.4883 35.9448 11.5996 34.1089 cv
11.5996 34.1089 13.9482 31.0747 13.0938 27.3159 cv
13.0938 27.3159 12.9658 28.0425 10.4033 30.6909 cv
10.4033 30.6909 9.4209 31.4595 8.99316 34.2788 cv
8.99316 34.2788 8.56641 30.9468 7.28516 28.6831 cv
7.28516 28.6831 6.68652 26.6323 6.72949 26.1626 cv
cp
f
4.97852 34.4927 mo
4.97852 34.4927 3.8252 41.4976 9.33496 44.7437 cv
9.33496 44.7437 11.8984 45.9829 12.2822 46.8804 cv
12.2822 46.8804 12.1973 43.9751 13.0088 41.3276 cv
13.0088 41.3276 14.2051 39.9175 12.4111 34.5347 cv
12.4111 34.5347 10.7451 37.9956 10.6172 42.3521 cv
10.6172 42.3521 10.2861 41.1343 7.48242 38.689 cv
7.48242 38.689 5.5332 36.2437 4.97852 34.4927 cv
cp
f
6.64453 43.6763 mo
6.64453 43.6763 6.77246 50.853 14.29 52.4761 cv
14.29 52.4761 15.999 52.9028 16.7676 53.5435 cv
16.7676 53.5435 15.7002 52.603 16.042 48.4604 cv
16.042 48.4604 16.3408 44.103 14.0342 42.0112 cv
14.0342 42.0112 12.667 47.4351 13.7773 49.6987 cv
13.7773 49.6987 11.3857 48.0757 9.16406 46.8374 cv
9.16406 46.8374 7.58398 45.6411 6.64453 43.6763 cv
cp
f
9.97559 51.6636 mo
9.97559 51.6636 11.5137 57.644 18.3057 58.6694 cv
18.3057 58.6694 22.4912 58.7554 23.1318 59.0112 cv
23.1318 59.0112 22.1074 58.5405 20.6123 52.7749 cv
20.6123 52.7749 20.4414 49.9126 16.7676 47.8628 cv
16.7676 47.8628 17.9639 54.0991 19.2881 55.7222 cv
19.2881 55.7222 18.8604 55.4233 15.0166 54.4409 cv
15.0166 54.4409 13.6924 54.6108 9.97559 51.6636 cv
cp
f
21.4238 51.3218 mo
21.4238 51.3218 22.4492 52.3901 25.0117 54.3979 cv
25.0117 54.3979 26.9336 56.1489 28.5566 60.4634 cv
28.5566 60.4634 30.1807 62.812 33.6406 63.4106 cv
33.9395 65.5464 li
33.9395 65.5464 33.2129 63.7944 30.0098 62.855 cv
30.0098 62.855 28.0449 62.7271 25.2256 63.4956 cv
25.2256 63.4956 22.0645 64.2222 17.6221 60.5913 cv
17.6221 60.5913 16.1699 59.5659 15.4004 59.1821 cv
15.4004 59.1821 19.6299 60.1216 20.5264 60.1216 cv
20.5264 60.1216 23.3887 59.7798 25.7803 60.6343 cv
25.7803 60.6343 26.1221 60.6772 26.5498 60.6772 cv
26.5498 60.6772 22.833 57.4731 21.4238 51.3218 cv
cp
f
1.0625 32.5532 mo
0.692383 32.5493 0.506836 32.9458 0.487305 33.3062 cv
0.464844 33.7202 0.683594 34.2983 1.50684 34.3433 cv
2.33008 34.3882 2.61035 33.8364 2.63281 33.4233 cv
2.66211 32.8784 2.38477 32.6245 2.13672 32.5737 cv
2.1748 31.8862 li
2.95801 31.9819 3.15527 32.7358 3.11328 33.4976 cv
3.05957 34.481 2.50586 35.0874 1.46973 35.0308 cv
0.474609 34.9771 -0.0517578 34.312 0.00390625 33.2886 cv
0.0380859 32.6616 0.303711 31.854 1.09961 31.8647 cv
1.0625 32.5532 li
cp
f
1.69727 31.3013 mo
2.71973 31.4771 3.33984 30.938 3.52441 29.8628 cv
3.70801 28.7876 3.30176 28.0737 2.2793 27.8979 cv
1.25684 27.7231 0.636719 28.2622 0.452148 29.3374 cv
0.268555 30.4116 0.674805 31.1265 1.69727 31.3013 cv
cp
1.81348 30.6226 mo
1.12598 30.5044 0.821289 30.0493 0.929688 29.4185 cv
1.03809 28.7837 1.47656 28.4595 2.16309 28.5776 cv
2.85059 28.6948 3.15625 29.147 3.04688 29.7808 cv
2.93945 30.4116 2.5 30.7397 1.81348 30.6226 cv
cp
f
1.3457 25.6782 mo
3.9834 25.3462 li
2.02148 23.5649 li
2.35938 22.5103 li
5.17871 23.4126 li
4.97656 24.0454 li
2.55566 23.271 li
2.55273 23.2788 li
4.62207 25.1548 li
4.37402 25.9282 li
1.5918 26.2817 li
1.58984 26.2896 li
4.01074 27.0649 li
3.82813 27.6353 li
1.00879 26.7329 li
1.3457 25.6782 li
cp
f
3.27148 20.5171 mo
5.92773 20.606 li
4.27246 18.5376 li
4.77148 17.5498 li
7.41406 18.8853 li
7.11426 19.478 li
4.8457 18.3315 li
4.8418 18.3389 li
6.58887 20.5181 li
6.22266 21.2427 li
3.41895 21.1528 li
3.41504 21.1597 li
5.68359 22.3071 li
5.41309 22.8413 li
2.77148 21.5054 li
3.27148 20.5171 li
cp
f
6.49023 17.6182 mo
7.34277 18.21 8.13281 17.9849 8.75488 17.0894 cv
9.37793 16.1934 9.3125 15.374 8.45996 14.7822 cv
7.6084 14.1904 6.81836 14.4155 6.19531 15.3115 cv
5.57324 16.207 5.63867 17.0264 6.49023 17.6182 cv
cp
6.88379 17.0522 mo
6.31152 16.6548 6.22852 16.1128 6.59277 15.5874 cv
6.95996 15.0586 7.49512 14.9502 8.06738 15.3481 cv
8.63965 15.7461 8.72559 16.2842 8.35742 16.813 cv
7.99316 17.3384 7.45605 17.4502 6.88379 17.0522 cv
cp
f
7.79688 13.2476 mo
8.41797 12.5488 li
11.2305 12.8042 li
11.2363 12.7983 li
9.53809 11.2891 li
9.93555 10.8413 li
12.1484 12.8086 li
11.5547 13.4766 li
8.68457 13.2241 li
8.67969 13.2305 li
10.4082 14.7671 li
10.0098 15.2144 li
7.79688 13.2476 li
cp
f
12.1533 8.79688 mo
12.791 8.25635 li
14.8965 9.50391 li
14.9023 9.49902 li
13.9932 7.23828 li
14.5 6.80908 li
15.6123 9.74658 li
14.9893 10.2739 li
12.834 9.00439 li
12.8281 9.00977 li
13.7471 11.3262 li
13.1367 11.8433 li
10.416 10.2676 li
10.9609 9.80664 li
13.0527 11.0649 li
13.0596 11.0601 li
12.1533 8.79688 li
cp
f
17.3418 5.60254 mo
15.9316 6.51807 li
16.3115 7.10254 li
17.6699 6.2207 li
17.9336 6.62646 li
16.5752 7.5083 li
17.0176 8.18945 li
18.4893 7.23389 li
18.7529 7.63965 li
16.7236 8.95703 li
15.1113 6.47363 li
17.0791 5.19678 li
17.3418 5.60254 li
cp
f
18.9424 7.48926 mo
19.5781 7.16504 li
19.5547 6.43213 li
21.0742 5.65723 li
21.6787 6.09473 li
22.3809 5.73682 li
19.6875 3.78613 li
18.9424 4.1665 li
18.9424 7.48926 li
cp
19.5469 5.89258 mo
19.5098 4.46631 li
20.6426 5.33398 li
19.5469 5.89258 li
cp
f
21.6211 2.88672 mo
22.2402 2.64551 li
23.1396 4.95313 li
24.6563 4.36182 li
24.832 4.8125 li
22.6963 5.64502 li
21.6211 2.88672 li
cp
f
26.8799 1.11328 mo
27.0156 1.57764 li
25.9336 1.89551 li
26.6318 4.27197 li
25.9951 4.45898 li
25.2969 2.08301 li
24.2148 2.40039 li
24.0781 1.93652 li
26.8799 1.11328 li
cp
f
27.4951 0.964844 mo
28.1484 0.841797 li
28.3721 2.02637 li
29.9561 1.72705 li
29.7314 0.54248 li
30.3848 0.419434 li
30.9336 3.32861 li
30.2813 3.45215 li
30.0449 2.20264 li
28.4619 2.50146 li
28.6973 3.75098 li
28.0449 3.87402 li
27.4951 0.964844 li
cp
f
32.8867 1.6123 mo
32.9189 2.64941 33.5703 3.15039 34.6602 3.1167 cv
35.751 3.08301 36.3696 2.54297 36.3384 1.50586 cv
36.3052 0.469238 35.6543 -0.0317383 34.5645 0.00146484 cv
33.4736 0.0351563 32.8545 0.575195 32.8867 1.6123 cv
cp
33.5752 1.59082 mo
33.5537 0.894531 33.9395 0.504883 34.5791 0.485352 cv
35.2227 0.46582 35.6279 0.830566 35.6494 1.52734 cv
35.6709 2.22412 35.2891 2.61328 34.6455 2.63281 cv
34.0059 2.65283 33.5967 2.28809 33.5752 1.59082 cv
cp
f
39.3169 0.220215 mo
39.2856 0.703125 li
37.7427 0.601563 li
37.6958 1.32129 li
39.1528 1.41748 li
39.1196 1.90039 li
37.6626 1.8042 li
37.5806 3.07275 li
36.9165 3.02881 li
37.1118 0.074707 li
39.3169 0.220215 li
cp
f
42.811 0.743652 mo
43.354 3.34668 li
44.9712 1.24805 li
46.0503 1.5 li
45.3765 4.38281 li
44.731 4.23193 li
45.3081 1.75635 li
45.3003 1.75439 li
43.5962 3.96729 li
42.8052 3.78271 li
42.229 1.0376 li
42.2212 1.03564 li
41.6431 3.51172 li
41.061 3.37549 li
41.7329 0.492188 li
42.811 0.743652 li
cp
f
45.6665 4.49268 mo
46.3315 4.75 li
46.8628 4.24316 li
48.4536 4.85889 li
48.5308 5.60107 li
49.2651 5.88525 li
48.9224 2.57813 li
48.1431 2.27637 li
45.6665 4.49268 li
cp
47.2593 3.87793 mo
48.2974 2.89893 li
48.4058 4.32178 li
47.2593 3.87793 li
cp
f
50.4312 5.46875 mo
50.3003 5.79834 50.4302 6.10742 50.894 6.35107 cv
51.3813 6.60596 51.6694 6.48877 51.7681 6.2998 cv
51.8677 6.11133 51.7788 5.95361 51.5093 5.76123 cv
51.0063 5.40479 li
50.3628 4.94678 50.2876 4.53271 50.4683 4.1875 cv
50.7866 3.58105 51.481 3.63477 52.0913 3.95508 cv
52.8569 4.35645 53.1021 4.89697 52.8423 5.43652 cv
52.2534 5.12842 li
52.4106 4.77539 52.2397 4.52832 51.8325 4.31494 cv
51.5894 4.1875 51.2573 4.16602 51.1323 4.40576 cv
51.0259 4.60938 51.1304 4.77051 51.3462 4.92529 cv
52.0425 5.4248 li
52.6216 5.83984 52.5601 6.2749 52.4165 6.54736 cv
52.1333 7.08838 51.5005 7.16406 50.6108 6.69775 cv
49.8521 6.2998 49.5474 5.72314 49.8423 5.16016 cv
50.4312 5.46875 li
cp
f
53.3647 7.11182 mo
53.1997 7.42578 53.2964 7.74658 53.7329 8.0376 cv
54.1899 8.34229 54.4897 8.25586 54.6079 8.07861 cv
54.7261 7.90137 54.6538 7.73486 54.4058 7.51563 cv
53.9429 7.1084 li
53.3511 6.58545 53.3198 6.16553 53.5356 5.8418 cv
53.9155 5.27148 54.6001 5.39795 55.1733 5.77979 cv
55.894 6.25977 56.0806 6.82275 55.7651 7.33203 cv
55.2124 6.96387 li
55.4058 6.62939 55.2612 6.36572 54.8794 6.11084 cv
54.6509 5.9585 54.3228 5.90283 54.1733 6.12793 cv
54.0454 6.31934 54.1333 6.49072 54.3306 6.66699 cv
54.9712 7.23682 li
55.5034 7.70996 55.397 8.13672 55.2261 8.39258 cv
54.8872 8.90088 54.2505 8.90967 53.4146 8.35254 cv
52.7017 7.87744 52.4595 7.27246 52.812 6.74365 cv
53.3647 7.11182 li
cp
f
54.8862 9.21973 mo
55.4312 9.68066 li
56.0981 9.375 li
57.3999 10.4771 li
57.23 11.2041 li
57.8315 11.7129 li
58.5894 8.47559 li
57.9507 7.93506 li
54.8862 9.21973 li
cp
56.5923 9.15967 mo
57.8931 8.57422 li
57.5308 9.9541 li
56.5923 9.15967 li
cp
f
61.1196 12.291 mo
61.3794 12.0273 61.2222 11.6187 60.9761 11.3545 cv
60.6938 11.0518 60.1255 10.8076 59.522 11.3696 cv
58.9185 11.9312 59.1216 12.5156 59.4038 12.8188 cv
59.7759 13.2178 60.1509 13.1938 60.3589 13.0503 cv
60.8286 13.5547 li
60.2153 14.0518 59.5356 13.6709 59.0161 13.1128 cv
58.3452 12.3926 58.2935 11.5723 59.0522 10.8652 cv
59.7817 10.186 60.6265 10.2686 61.3247 11.0186 cv
61.7524 11.478 62.1489 12.229 61.5894 12.7954 cv
61.1196 12.291 li
cp
f
62.8218 12.8203 mo
63.2173 13.354 li
62.2476 14.0713 li
63.2065 15.3667 li
64.1753 14.6494 li
64.5708 15.1831 li
62.1909 16.9448 li
61.7964 16.4106 li
62.8179 15.6543 li
61.8589 14.3594 li
60.8374 15.1157 li
60.4419 14.5815 li
62.8218 12.8203 li
cp
f
65.0854 15.9658 mo
65.4194 16.54 li
63.856 17.4492 li
63.4312 17.6963 63.3491 18.1094 63.604 18.5493 cv
63.8511 18.9741 64.2251 19.1362 64.6968 18.8618 cv
66.2466 17.9619 li
66.5796 18.5356 li
65.0415 19.4302 li
64.4565 19.77 63.811 19.8179 63.1558 18.6909 cv
62.7944 18.0708 62.7739 17.3096 63.4448 16.9199 cv
65.0854 15.9658 li
cp
f
65.3521 20.6694 mo
65.0454 20.8472 64.9575 21.1704 65.1724 21.6489 cv
65.3989 22.1499 65.6978 22.2358 65.8921 22.1479 cv
66.0864 22.061 66.1138 21.8823 66.021 21.564 cv
65.8442 20.9741 li
65.6196 20.2153 65.8169 19.8433 66.1724 19.6841 cv
66.7964 19.4028 67.3101 19.8735 67.5923 20.5015 cv
67.9478 21.2905 67.8071 21.8667 67.269 22.1304 cv
66.9966 21.5249 li
67.3384 21.3442 67.356 21.0444 67.1675 20.6255 cv
67.0542 20.3745 66.8062 20.1538 66.5591 20.2651 cv
66.3501 20.3589 66.3335 20.5513 66.4077 20.8052 cv
66.647 21.6284 li
66.8472 22.312 66.5298 22.6167 66.2495 22.7427 cv
65.6929 22.9937 65.1479 22.6636 64.7358 21.7476 cv
64.3833 20.9653 64.4995 20.3247 65.0796 20.064 cv
65.3521 20.6694 li
cp
f
68.7095 24.9888 mo
68.1626 23.3989 li
67.5034 23.6255 li
68.0298 25.1567 li
67.5728 25.3149 li
67.0454 23.7827 li
66.2778 24.0474 li
66.8491 25.7065 li
66.3911 25.8638 li
65.604 23.5767 li
68.4038 22.6128 li
69.1665 24.8315 li
68.7095 24.9888 li
cp
f
70.0581 28.2231 mo
69.5884 28.3413 li
69.314 27.2476 li
66.9116 27.853 li
66.7495 27.2085 li
69.1509 26.604 li
68.8755 25.5103 li
69.3452 25.3921 li
70.0581 28.2231 li
cp
f
70.5991 31.396 mo
70.1216 31.4751 li
69.936 30.3628 li
67.4927 30.77 li
67.3833 30.1147 li
69.8267 29.7075 li
69.6411 28.5952 li
70.1187 28.5161 li
70.5991 31.396 li
cp
f
68.6821 32.6743 mo
68.3335 32.7407 68.1431 33.0161 68.186 33.5386 cv
68.2319 34.0874 68.4858 34.2671 68.6978 34.2495 cv
68.9106 34.2319 68.9966 34.0718 69.0142 33.7417 cv
69.0444 33.1265 li
69.0854 32.3364 69.395 32.0513 69.7837 32.019 cv
70.4663 31.9614 70.7935 32.5767 70.8501 33.2632 cv
70.9224 34.1245 70.5972 34.6216 70.0024 34.6919 cv
69.9468 34.0298 li
70.3296 33.9731 70.4458 33.6958 70.4077 33.2378 cv
70.3853 32.9644 70.2251 32.6733 69.9556 32.6958 cv
69.7261 32.7144 69.646 32.8901 69.6313 33.1548 cv
69.5835 34.0112 li
69.5444 34.7222 69.144 34.9038 68.8374 34.9292 cv
68.228 34.98 67.8247 34.4868 67.7417 33.4858 cv
67.6704 32.6313 67.9937 32.0649 68.6265 32.0122 cv
68.6821 32.6743 li
cp
f
1.74902 46.478 mo
2.16992 47.8394 li
2.56348 49.1089 3.52051 49.1479 4.05469 48.9819 cv
4.89258 48.7222 5.36523 48.0474 5.02539 46.9517 cv
4.60547 45.5942 li
1.74902 46.478 li
cp
4.33691 46.3804 mo
4.53223 47.0093 li
4.70605 47.5708 4.55664 48.0981 3.89551 48.3022 cv
3.52441 48.4175 2.8623 48.4233 2.61035 47.6079 cv
2.41406 46.9751 li
4.33691 46.3804 li
cp
f
6.19824 51.354 mo
5.52441 49.7954 li
4.87793 50.0747 li
5.52832 51.5757 li
5.0791 51.771 li
4.42969 50.269 li
3.67676 50.5952 li
4.38086 52.2222 li
3.93262 52.4155 li
2.96191 50.1733 li
5.70605 48.9858 li
6.64746 51.1597 li
6.19824 51.354 li
cp
f
4.31934 53.1987 mo
4.64746 53.7847 li
5.62305 53.2378 li
6.05859 54.0142 li
6.57324 54.9312 7.14941 54.8081 7.45313 54.6382 cv
8.00586 54.3276 8.10059 53.8276 7.63867 53.0044 cv
6.92773 51.7358 li
4.31934 53.1987 li
cp
6.83008 52.561 mo
7.15332 53.1382 li
7.3418 53.4741 7.4707 53.8296 7.11621 54.0288 cv
6.83398 54.187 6.60645 53.9917 6.43262 53.6812 cv
6.0498 52.9976 li
6.83008 52.561 li
cp
f
5.90625 56.0269 mo
6.3291 56.6099 li
7.05762 56.4702 li
8.06836 57.8667 li
7.72656 58.5386 li
8.19336 59.1821 li
9.71777 56.1899 li
9.22168 55.5054 li
5.90625 56.0269 li
cp
7.59375 56.3784 mo
9.01172 56.1187 li
8.32324 57.3843 li
7.59375 56.3784 li
cp
f
8.65039 59.6909 mo
9.10547 60.1831 li
9.97266 59.3813 li
10.4531 59.9019 li
10.8975 60.3823 10.8994 60.5601 10.4873 60.9819 cv
10.3652 61.105 10.2236 61.2642 10.1855 61.3511 cv
10.6748 61.8794 li
10.7285 61.7671 10.8184 61.6392 10.9932 61.4614 cv
11.3779 61.0601 11.5664 60.812 11.124 60.2905 cv
11.1299 60.2856 li
11.4658 60.6011 11.8721 60.7222 12.2549 60.3677 cv
12.6895 59.9663 12.5098 59.4604 12.0635 58.9771 cv
10.8457 57.6597 li
8.65039 59.6909 li
cp
10.9424 58.4839 mo
11.5527 59.144 li
11.7939 59.4058 11.9775 59.6772 11.7129 59.9214 cv
11.4482 60.1655 11.1699 59.9937 10.9033 59.7046 cv
10.3125 59.0659 li
10.9424 58.4839 li
cp
f
15.2617 61.9644 mo
14.9395 62.3306 li
14.084 61.5786 li
12.4326 63.4575 li
11.9287 63.0151 li
13.5801 61.1362 li
12.7246 60.3843 li
13.0479 60.0171 li
15.2617 61.9644 li
cp
f
16.3965 62.812 mo
15.9668 65.4624 li
18.251 64.0688 li
19.1768 64.6958 li
17.5 67.1714 li
16.9443 66.7954 li
18.3848 64.6694 li
18.3779 64.6646 li
15.9707 66.1362 li
15.292 65.6753 li
15.7412 62.8784 li
15.7344 62.8745 li
14.2939 64.9995 li
13.7939 64.6606 li
15.4707 62.1851 li
16.3965 62.812 li
cp
f
21.6104 66.4507 mo
20.0977 65.6802 li
19.7783 66.3081 li
21.2363 67.0503 li
21.0146 67.4858 li
19.5566 66.7437 li
19.1846 67.4741 li
20.7637 68.2788 li
20.542 68.7144 li
18.3643 67.605 li
19.7217 64.9409 li
21.832 66.0151 li
21.6104 66.4507 li
cp
f
22.376 66.2808 mo
23.2578 66.6187 li
24.0205 69.3667 li
24.0273 69.3696 li
24.8477 67.2261 li
25.4121 67.4429 li
24.3438 70.2358 li
23.501 69.9136 li
22.7139 67.1108 li
22.7061 67.1089 li
21.8721 69.2905 li
21.3076 69.0737 li
22.376 66.2808 li
cp
f
28.5664 68.2915 mo
28.4404 68.7632 li
27.3398 68.4702 li
26.6963 70.8882 li
26.0488 70.7153 li
26.6924 68.2983 li
25.5908 68.0054 li
25.7168 67.5327 li
28.5664 68.2915 li
cp
f
30.0625 70.1089 mo
29.9463 71.1499 30.5264 71.7437 31.6221 71.8647 cv
32.7168 71.9858 33.4121 71.5347 33.5283 70.4927 cv
33.6436 69.4507 33.0635 68.8569 31.9688 68.7358 cv
30.874 68.6147 30.1777 69.0669 30.0625 70.1089 cv
cp
30.7539 70.1851 mo
30.8311 69.4858 31.2725 69.1509 31.915 69.2222 cv
32.5615 69.2935 32.9141 69.7163 32.8369 70.4155 cv
32.7588 71.1157 32.3213 71.4507 31.6758 71.3784 cv
31.0332 71.3081 30.6758 70.8843 30.7539 70.1851 cv
cp
f
36.4341 69.0288 mo
36.4282 69.5171 li
34.8662 69.4995 li
34.8574 70.228 li
36.3325 70.2456 li
36.3267 70.7339 li
34.8516 70.7163 li
34.8359 71.9995 li
34.165 71.9917 li
34.2012 69.0015 li
36.4341 69.0288 li
cp
f
38.7993 71.8882 mo
39.4653 71.8042 li
39.3228 70.6948 li
40.2075 70.5815 li
41.2505 70.4487 41.3521 69.8677 41.3071 69.5229 cv
41.2271 68.894 40.7993 68.6187 39.8638 68.7378 cv
38.4204 68.9214 li
38.7993 71.8882 li
cp
39.1489 69.3218 mo
39.8052 69.2378 li
40.188 69.189 40.5649 69.2036 40.6177 69.6069 cv
40.6587 69.9272 40.3911 70.0659 40.0376 70.1108 cv
39.2622 70.2095 li
39.1489 69.3218 li
cp
f
41.5884 68.4956 mo
42.2407 68.3394 li
42.6646 70.1167 li
42.7798 70.5991 43.1567 70.8003 43.6548 70.6802 cv
44.1392 70.5649 44.4048 70.2495 44.2759 69.7144 cv
43.856 67.9546 li
44.5083 67.7983 li
44.9263 69.5464 li
45.0845 70.2104 44.9429 70.8491 43.6626 71.1558 cv
42.9575 71.3237 42.2153 71.1226 42.0337 70.3608 cv
41.5884 68.4956 li
cp
f
45.896 67.8218 mo
46.6743 67.5405 li
47.0015 67.4214 47.3081 67.3813 47.4185 67.6851 cv
47.5083 67.9351 47.3599 68.0942 47.0522 68.2046 cv
46.1519 68.5308 li
45.896 67.8218 li
cp
46.1245 70.4263 mo
47.8423 69.8042 li
48.7495 69.4761 48.8062 68.9487 48.6938 68.6421 cv
48.5005 68.1079 47.9761 68.1304 47.5991 68.2319 cv
47.5884 68.2046 li
47.9468 68.0483 48.1929 67.7085 48.0649 67.354 cv
47.855 66.7739 47.3149 66.8149 46.7622 67.0151 cv
45.1069 67.6147 li
46.1245 70.4263 li
cp
46.3101 68.9673 mo
47.2251 68.6362 li
47.5054 68.5347 47.8726 68.4897 47.9897 68.813 cv
48.0942 69.1011 47.856 69.3062 47.4702 69.4458 cv
46.5981 69.7612 li
46.3101 68.9673 li
cp
f
48.4048 66.3647 mo
49.0093 66.0757 li
50.0884 68.3315 li
51.5718 67.6226 li
51.7827 68.064 li
49.6938 69.062 li
48.4048 66.3647 li
cp
f
50.8804 65.1304 mo
51.4653 64.8013 li
52.9292 67.4087 li
52.3442 67.7378 li
50.8804 65.1304 li
cp
f
54.5894 63.936 mo
54.3687 63.6362 53.9351 63.7261 53.6333 63.9292 cv
53.2856 64.1626 52.9517 64.6909 53.4155 65.3823 cv
53.8794 66.0737 54.4946 65.9644 54.8423 65.7319 cv
55.2993 65.4253 55.3354 65.0464 55.2251 64.8159 cv
55.8032 64.4292 li
56.2017 65.1187 55.7124 65.7358 55.0728 66.1655 cv
54.2476 66.7192 53.4214 66.6401 52.8374 65.77 cv
52.2769 64.9341 52.4937 64.105 53.354 63.5288 cv
53.8794 63.1753 54.6919 62.8999 55.1675 63.5483 cv
54.5894 63.936 li
cp
f
56.188 61.5229 mo
56.6792 61.0659 li
57.5083 61.9585 li
58.6997 60.8491 li
57.8706 59.9585 li
58.3618 59.5015 li
60.3989 61.6909 li
59.9077 62.147 li
59.0327 61.2065 li
57.8413 62.3159 li
58.7153 63.2554 li
58.2241 63.7124 li
56.188 61.5229 li
cp
f
60.6997 57.5952 mo
59.5815 58.8726 li
60.1108 59.3374 li
61.189 58.106 li
61.5562 58.4272 li
60.479 59.6577 li
61.0962 60.1987 li
62.2632 58.8647 li
62.6313 59.187 li
61.022 61.0249 li
58.772 59.0562 li
60.3325 57.2729 li
60.6997 57.5952 li
cp
f
62.9849 58.7954 mo
63.3989 58.2046 li
63.0298 57.562 li
64.019 56.1519 li
64.7651 56.2554 li
65.2222 55.604 li
61.896 55.1392 li
61.4116 55.8315 li
62.9849 58.7954 li
cp
62.7671 57.0854 mo
62.0591 55.8296 li
63.481 56.0679 li
62.7671 57.0854 li
cp
f
62.8882 53.6147 mo
63.2144 53.0278 li
65.4009 54.2437 li
66.1997 52.8081 li
66.6274 53.0454 li
65.5015 55.0679 li
62.8882 53.6147 li
cp
f
65.2427 48.8491 mo
65.6899 49.0474 li
65.228 50.0884 li
67.5142 51.103 li
67.2417 51.7163 li
64.9556 50.7017 li
64.4937 51.7427 li
64.0474 51.5444 li
65.2427 48.8491 li
cp
f
65.353 48.562 mo
65.5601 47.9243 li
66.7183 48.2983 li
67.2192 46.7495 li
66.061 46.3755 li
66.2671 45.7378 li
69.1128 46.6577 li
68.9058 47.2964 li
67.6841 46.9009 li
67.1831 48.4487 li
68.4048 48.8452 li
68.1978 49.4829 li
65.353 48.562 li
cp
f
39.2837 32.1968 mo
39.2329 32.1821 39.2915 32.0444 39.2915 32.0444 cv
39.4067 31.978 39.3931 32.1245 39.3931 32.1245 cv
39.3716 32.2329 39.2837 32.1968 39.2837 32.1968 cv
cp
39.2681 32.7065 mo
39.2173 32.7866 39.1665 32.7065 39.1665 32.7065 cv
39.1235 32.5532 39.2329 32.561 39.2329 32.561 cv
39.3208 32.5903 39.2681 32.7065 39.2681 32.7065 cv
cp
38.2661 32.561 mo
37.6646 32.0171 37.5864 32.3276 37.5864 32.3276 cv
37.354 32.9106 37.3149 32.3862 37.3149 32.3862 cv
37.2954 31.0464 li
37.1802 31.7456 37.1216 31.3188 37.1216 31.3188 cv
37.1489 31.103 37.0415 30.0405 36.981 29.5005 cv
37.0122 30.1187 36.9458 31.2603 36.9458 31.2603 cv
36.772 30.6196 36.772 31.1626 36.772 31.1626 cv
36.9263 31.3374 37.0825 32.7749 37.0825 32.7749 cv
37.0825 32.7749 37.1411 32.561 37.1021 32.8325 cv
37.063 33.105 36.8872 32.6968 36.8872 32.6968 cv
36.8872 33.0073 36.5767 33.2983 36.5767 33.2983 cv
36.4224 33.396 36.4224 33.2026 36.4224 33.2026 cv
36.5591 33.0269 36.5396 32.3667 36.5396 32.3667 cv
36.5005 31.4546 36.4028 32.4634 36.4028 32.4634 cv
36.5005 32.7554 36.2271 33.2026 36.2271 33.2026 cv
35.9556 33.6675 35.7432 33.144 35.7432 33.144 cv
35.5488 33.7847 35.2188 33.1831 35.2188 33.1831 cv
34.5195 33.9399 34.3838 32.8521 34.3838 32.8521 cv
34.3447 32.522 li
34.209 32.522 34.1699 32.2114 34.1699 32.2114 cv
34.0537 32.1919 34.0732 33.0269 34.0732 33.0269 cv
33.7432 33.3179 33.4902 33.0659 33.4902 33.0659 cv
33.6064 32.8325 33.4707 29.9399 33.4707 29.9399 cv
33.5293 29.4155 33.335 28.7554 33.335 28.7554 cv
33.8398 28.5806 li
34.1113 28.9692 34.248 29.9976 34.248 29.9976 cv
35.1016 30.8716 35.7236 30.0757 35.7236 30.0757 cv
35.9946 29.9399 36.1118 28.6392 36.1118 28.6392 cv
36.1509 28.4253 36.6548 28.5806 36.6548 28.5806 cv
36.8677 28.7163 37.063 28.7358 37.063 28.7358 cv
37.9165 28.7554 38.0337 30.7749 38.0337 30.7749 cv
37.9556 32.1724 38.2271 32.1343 38.2271 32.1343 cv
38.7134 32.8716 38.2661 32.561 38.2661 32.561 cv
cp
37.3345 33.7456 mo
37.3345 33.7456 37.5864 34.269 37.4712 34.3862 cv
37.4712 34.3862 37.2759 34.3472 37.3345 33.7456 cv
cp
33.7432 33.6284 mo
33.8008 33.396 li
33.9756 33.5903 34.7529 33.7261 34.7529 33.7261 cv
34.1895 33.8628 33.7432 33.6284 33.7432 33.6284 cv
cp
33.7627 33.978 mo
33.7813 33.7651 li
33.8398 33.8042 34.6162 33.9976 34.6162 33.9976 cv
34.2666 34.1343 33.7627 33.978 33.7627 33.978 cv
cp
35.0635 33.8433 mo
35.5098 34.0171 36.52 33.7261 36.52 33.7261 cv
36.7524 33.6479 36.811 33.7651 36.811 33.7651 cv
36.2466 34.1538 34.9854 33.978 34.9854 33.978 cv
34.791 33.9204 35.0635 33.8433 35.0635 33.8433 cv
cp
34.9463 34.269 mo
34.8301 34.4058 34.5 34.3276 34.5 34.3276 cv
34.2285 34.2505 34.6162 34.1733 34.6162 34.1733 cv
35.0244 34.1147 34.9463 34.269 34.9463 34.269 cv
cp
38.3442 36.1538 mo
38.2271 36.561 37.7622 36.1919 37.7622 36.1919 cv
37.9165 36.9683 37.5493 36.269 37.5493 36.269 cv
37.5493 37.1626 li
37.645 37.6675 37.4321 37.687 37.4321 37.687 cv
37.3149 37.7651 36.7524 37.6479 36.7524 37.6479 cv
36.3052 37.7847 36.3247 37.2017 36.3247 37.2017 cv
36.2661 37.0854 36.3833 36.3862 36.3833 36.3862 cv
36.4419 36.2495 36.3052 36.2495 36.3052 36.2495 cv
36.2466 36.2886 36.2271 36.8911 36.2271 36.8911 cv
36.1509 37.0073 36.1704 37.7456 36.1704 37.7456 cv
36.0337 37.7261 li
35.8203 38.0562 34.209 37.8042 34.209 37.8042 cv
33.626 37.5698 33.2578 38.0562 33.2578 38.0562 cv
33.0244 38.3667 33.083 38.1147 33.083 38.1147 cv
32.9854 37.9194 33.083 36.9878 33.083 36.9878 cv
33.1992 36.8911 33.5879 34.7749 33.5879 34.7749 cv
33.6455 34.5415 33.7432 34.4644 33.7432 34.4644 cv
33.8008 34.4839 33.8789 34.814 33.8789 34.814 cv
33.8594 34.5806 34.1113 34.5806 34.1113 34.5806 cv
34.2285 34.6382 34.248 35.2017 34.248 35.2017 cv
34.3838 34.6187 li
34.4414 34.4448 35.2383 34.3862 35.2383 34.3862 cv
35.3936 34.4448 36.5591 34.3472 36.5591 34.3472 cv
37.0044 34.1929 37.0825 34.6772 37.0825 34.6772 cv
37.3149 35.5894 li
37.3149 35.8618 37.5103 35.8237 37.5103 35.8237 cv
37.4712 35.7261 37.7036 35.3765 37.7036 35.3765 cv
37.7622 35.2983 37.645 33.6675 37.645 33.6675 cv
37.4517 33.3179 37.4517 33.0269 37.4517 33.0269 cv
37.8403 33.1636 37.7622 32.561 37.7622 32.561 cv
38.3833 32.7554 38.1313 33.0464 38.1313 33.0464 cv
38.0923 33.6284 38.3052 33.5327 38.3052 33.5327 cv
38.3638 33.978 38.1899 34.4839 38.1899 34.4839 cv
38.1899 35.2983 li
38.4614 35.7456 38.3442 36.1538 38.3442 36.1538 cv
cp
36.6548 40.8325 mo
36.9751 40.7456 li
36.9751 40.7456 37.063 40.9194 36.9458 41.0366 cv
36.9458 41.0366 36.772 41.0659 37.0044 41.5308 cv
37.0044 41.5308 36.8013 43.4819 36.5669 43.8901 cv
36.5669 43.8901 36.8599 44.2397 36.5669 44.269 cv
36.2192 44.1519 li
36.2192 44.1519 36.1313 43.104 36.1021 42.6382 cv
36.1021 42.6382 35.8984 41.5015 36.0728 41.2104 cv
36.3638 41.269 li
36.3638 41.269 36.1021 40.4536 36.1313 40.105 cv
36.1313 40.105 36.0142 38.9976 36.2759 38.6772 cv
36.2759 38.6772 36.0923 38.5698 36.1118 38.5874 cv
36.1157 38.5913 36.1196 38.5933 36.1235 38.5972 cv
36.1177 38.5923 36.1138 38.5894 36.1118 38.5874 cv
36.0278 38.521 36.0942 38.4819 36.0728 38.3569 cv
36.0728 38.3569 36.3638 37.8325 37.063 38.0366 cv
37.063 38.0366 37.2661 39.4058 36.8306 40.0757 cv
36.8306 40.0757 36.6841 40.396 36.5103 40.4253 cv
36.5103 40.4253 36.3345 40.7456 36.6548 40.8325 cv
cp
36.9458 45.4194 mo
37.2231 45.5503 37.0923 45.0698 37.0923 45.0698 cv
37.3403 45.3462 37.3403 45.5356 37.3403 45.5356 cv
37.4556 45.7827 37.106 45.8706 37.106 45.8706 cv
36.7271 45.9878 36.3794 45.2593 36.3794 45.2593 cv
36.5103 45.0405 li
36.6411 45.1577 li
36.6841 45.3755 36.9458 45.4194 36.9458 45.4194 cv
cp
36.2915 44.4585 mo
36.5239 44.3999 li
36.7134 44.5171 li
36.772 44.7495 36.5532 44.7202 36.5532 44.7202 cv
36.2329 44.7056 36.2915 44.4585 36.2915 44.4585 cv
cp
34.4229 40.5991 mo
34.5967 40.6772 34.4414 40.8325 34.4414 40.8325 cv
34.7139 40.7163 34.5195 41.5698 34.5195 41.5698 cv
34.8496 41.9976 34.5967 42.7739 34.5967 42.7739 cv
34.5195 43.1812 34.4033 42.8315 34.4033 42.8315 cv
34.3643 42.5601 34.2285 42.5796 34.2285 42.5796 cv
34.1895 42.8511 34.5 43.2593 34.5 43.2593 cv
34.7139 44.0757 34.4609 44.6187 34.4609 44.6187 cv
34.1309 44.6187 li
34.2861 44.8315 li
34.0928 44.8511 li
34.3057 45.0259 li
34.0146 45.3179 33.7627 45.0845 33.7627 45.0845 cv
33.8398 44.7544 li
34.0342 44.5796 33.8398 43.3374 33.8398 43.3374 cv
33.374 42.7163 33.626 41.4155 33.626 41.4155 cv
33.7236 41.2983 33.7041 40.7739 33.7041 40.7739 cv
33.5488 40.4253 li
33.3936 39.4546 33.4326 38.4253 33.4326 38.4253 cv
33.9365 37.8813 34.6162 38.5024 34.6162 38.5024 cv
34.5693 39.2046 li
34.6162 39.2593 li
34.7734 38.8374 34.8496 38.9097 34.8496 38.9097 cv
34.8887 39.9585 34.4229 40.5991 34.4229 40.5991 cv
cp
34.3252 45.6675 mo
34.0488 46.103 33.4658 46.3804 33.4658 46.3804 cv
32.6797 46.7437 33.1309 46.0454 33.1309 46.0454 cv
33.4658 46.2056 33.8447 45.5356 33.8447 45.5356 cv
34.0518 45.7437 34.0654 45.3999 34.0645 45.2827 cv
34.0488 45.2886 li
34.0635 45.2446 li
34.0635 45.2446 34.0645 45.2593 34.0645 45.2827 cv
34.5439 45.0845 li
34.748 45.0112 34.5869 45.2153 34.5869 45.2153 cv
34.5869 45.2153 34.6016 45.23 34.3252 45.6675 cv
cp
33.4082 45.5796 mo
33.2764 45.4487 33.4805 45.4917 33.4805 45.4917 cv
33.5684 45.6675 33.4082 45.5796 33.4082 45.5796 cv
cp
32.5977 45.9194 mo
32.6357 45.6089 31.3154 32.6001 31.3154 32.6001 cv
31.5879 33.105 32.5977 33.3374 32.5977 33.3374 cv
32.6357 33.144 33.1797 33.3374 33.1797 33.3374 cv
33.335 33.1831 33.4902 33.4546 33.4902 33.4546 cv
33.4902 33.8433 li
33.335 33.8433 33.4902 34.269 33.4902 34.269 cv
33.374 34.6577 33.1025 36.3276 33.1025 36.3276 cv
32.4805 38.0366 33.1025 39.2007 33.1025 39.2007 cv
33.0635 39.396 33.4902 41.0269 33.4902 41.0269 cv
33.1797 42.6968 33.6455 43.395 33.6455 43.395 cv
33.7236 43.7065 33.6455 44.7544 33.6455 44.7544 cv
33.0635 45.6479 li
32.8691 46.1138 32.5977 45.9194 32.5977 45.9194 cv
cp
30.4619 31.8228 mo
31.083 32.2505 li
32.3252 45.104 li
30.5781 42.5405 30.4619 31.8228 30.4619 31.8228 cv
cp
30.3447 30.6294 mo
30.2578 30.6577 30.0342 30.6294 30.0342 30.6294 cv
29.8789 30.5415 30.0732 30.4644 30.0732 30.4644 cv
30.1318 30.4927 30.3838 30.4351 30.3838 30.4351 cv
30.5 30.3472 30.4717 30.4741 30.4717 30.4741 cv
30.4229 30.4927 30.3447 30.6294 30.3447 30.6294 cv
cp
30.3838 30.8716 mo
30.2676 30.9595 30.0049 30.9009 30.0049 30.9009 cv
29.8984 30.7944 30.083 30.7163 30.083 30.7163 cv
30.5 30.7065 30.3838 30.8716 30.3838 30.8716 cv
cp
30.3838 31.0562 mo
30.3545 31.1528 30.1992 31.0659 30.1992 31.0659 cv
30.1123 31.0659 30.1699 31.1626 30.1699 31.1626 cv
30.248 31.3188 30.0928 31.2896 30.0928 31.2896 cv
29.8115 31.1919 30.0244 30.9976 30.0244 30.9976 cv
30.4814 30.9399 30.3838 31.0562 30.3838 31.0562 cv
cp
30.1025 30.2603 mo
30.1025 30.2603 30.2285 30.1724 30.3447 30.27 cv
30.3447 30.27 30.4521 30.3472 30.2773 30.3374 cv
30.2773 30.3374 30.0146 30.3765 30.1025 30.2603 cv
cp
30.7139 28.3481 mo
31.0049 31.0073 li
30.8691 31.0659 30.8105 31.0073 30.8105 31.0073 cv
30.8691 30.9497 30.7139 30.4253 30.7139 30.4253 cv
30.8887 30.1724 30.5391 29.8042 30.5391 29.8042 cv
30.4619 29.6685 30.7139 28.3481 30.7139 28.3481 cv
cp
31.0635 31.9399 mo
31.0635 31.9399 30.5391 31.7163 30.7139 31.5024 cv
30.7139 31.5024 30.9854 31.2896 31.0439 31.5415 cv
31.0635 31.9399 li
cp
31.7725 31.8618 mo
32.2578 31.9878 32.3057 32.2983 32.3057 32.2983 cv
32.5 32.4058 32.4521 32.1626 32.4521 32.1626 cv
32.2871 32.0659 32.3252 31.8911 32.3252 31.8911 cv
32.5391 31.5806 32.7139 31.7358 32.7139 31.7358 cv
33.1602 32.1724 32.9277 32.4546 32.9277 32.4546 cv
32.8301 32.4927 32.7725 32.7935 32.7725 32.7935 cv
32.7139 33.1538 32.5195 33.1147 32.5195 33.1147 cv
31.918 33.2212 31.248 32.1626 31.248 32.1626 cv
31.2188 31.7065 li
31.3545 31.6968 31.7725 31.8618 31.7725 31.8618 cv
cp
32.6943 30.2896 mo
32.6943 30.2896 32.8789 30.3667 32.7725 30.0562 cv
32.7725 30.0562 32.4326 29.3765 33.1602 28.9497 cv
33.1602 28.9497 33.4424 29.3569 33.3252 29.7944 cv
33.3252 29.7944 33.0928 29.7163 33.248 30.2993 cv
33.248 30.2993 33.3057 30.6196 33.1992 30.6196 cv
33.1992 30.6196 33.2676 30.8618 33.2764 31.0366 cv
33.2764 31.0366 33.3545 31.4829 33.1025 31.3188 cv
33.1025 31.3188 33.1797 31.8325 32.8789 31.5415 cv
32.8789 31.5415 32.6162 31.4155 32.5195 31.4546 cv
32.5195 31.4546 32.4707 30.4253 32.6943 30.2896 cv
cp
33.9326 25.1636 mo
33.9326 25.0903 34.1211 25.0327 34.1211 25.0327 cv
34.3105 25.0757 34.3691 25.2798 34.3691 25.2798 cv
34.1064 25.5854 33.9326 25.1636 33.9326 25.1636 cv
cp
34.4707 24.7271 mo
34.6162 24.7554 34.7041 25.0474 34.7041 25.0474 cv
34.5439 25.2798 34.2813 24.814 34.2813 24.814 cv
34.165 24.6245 34.4707 24.7271 34.4707 24.7271 cv
cp
34.835 24.7554 mo
34.8789 24.7271 35.0244 25.2222 35.0244 25.2222 cv
35.4316 25.2505 35.5771 25.8481 35.5771 25.8481 cv
35.6211 25.979 35.4902 26.1245 35.4902 26.1245 cv
35.4287 26.2593 34.748 26.1978 34.748 26.1978 cv
34.3105 26.1538 34.4434 26.2651 34.3691 26.2554 cv
34.2939 26.2466 34.2383 26.1831 34.2383 26.1831 cv
34.1504 25.5708 35.2432 25.731 35.2432 25.731 cv
35.4316 25.5708 35.1113 25.5425 35.1113 25.5425 cv
34.835 25.4399 34.5439 25.6587 34.5439 25.6587 cv
34.3545 25.9204 34.3545 25.6001 34.3545 25.6001 cv
34.2813 25.4253 34.8496 25.2505 34.8496 25.2505 cv
34.8203 25.0327 34.835 24.7554 34.835 24.7554 cv
cp
35.6846 26.4839 mo
35.7041 26.5425 35.6162 26.7749 35.6162 26.7749 cv
35.4121 26.9595 35.5 27.1343 35.5 27.1343 cv
35.5293 27.1929 35.4902 27.3579 35.4902 27.3579 cv
35.4414 27.5229 35.2188 27.7163 35.2188 27.7163 cv
35.0918 27.7358 34.7813 27.7554 34.7813 27.7554 cv
34.6064 27.7456 34.335 27.3579 34.335 27.3579 cv
34.2285 27.231 34.335 27.0757 34.335 27.0757 cv
34.4033 27.0278 34.374 26.9106 34.374 26.9106 cv
34.1602 26.8335 34.209 26.4351 34.209 26.4351 cv
34.3154 26.4448 li
34.2666 26.5806 34.5488 26.4546 34.5488 26.4546 cv
34.4902 26.5513 34.7334 26.4937 34.7334 26.4937 cv
34.7529 26.4253 34.9658 26.396 34.9658 26.396 cv
35.0342 26.6978 34.9658 26.8237 34.9658 26.8237 cv
34.917 26.8726 34.7813 26.9497 34.7813 26.9497 cv
34.6357 27.0181 34.8496 27.0376 34.8496 27.0376 cv
34.9658 27.1343 35.083 27.0562 35.083 27.0562 cv
35.0918 27.0083 35.1895 27.0181 35.1895 27.0181 cv
35.2861 27.0659 35.2568 27.1831 35.2568 27.1831 cv
35.209 27.231 35.1113 27.2017 35.1113 27.2017 cv
35.1016 27.144 34.7813 27.1929 34.7813 27.1929 cv
34.6455 27.1831 34.7529 27.3091 34.7529 27.3091 cv
34.8496 27.3091 34.8496 27.3579 34.8496 27.3579 cv
34.917 27.4839 35.0439 27.3862 35.0439 27.3862 cv
35.1113 27.2798 35.2568 27.2505 35.2568 27.2505 cv
35.4414 27.27 35.4033 27.1343 35.4033 27.1343 cv
35.3936 27.0083 35.1602 26.8433 35.1602 26.8433 cv
35.0732 26.5903 35.1797 26.4546 35.1797 26.4546 cv
35.3252 26.4546 35.5869 26.4155 35.5869 26.4155 cv
35.6943 26.3677 35.6846 26.4839 35.6846 26.4839 cv
cp
34.5586 27.9985 mo
34.5586 27.9985 34.5 27.7554 34.7041 27.8237 cv
34.7041 27.8237 35.2959 28.0083 35.2959 28.1343 cv
35.2959 28.1343 35.374 28.4741 35.0244 28.5229 cv
35.0244 28.5229 34.5781 28.4741 34.5684 28.3091 cv
34.5684 28.3091 34.5781 28.2114 34.6943 28.2114 cv
34.6943 28.2114 34.5781 28.1733 34.5586 27.9985 cv
cp
34.1113 28.0854 mo
33.9854 27.9888 34.1797 27.7847 34.1797 27.7847 cv
34.209 27.979 li
34.1504 28.1919 34.1113 28.0854 34.1113 28.0854 cv
cp
35.7236 28.7651 mo
35.7813 28.5132 35.8779 28.7651 35.8779 28.7651 cv
35.9072 28.8618 35.791 29.2505 35.791 29.2505 cv
35.5771 30.4741 34.6846 30.0269 34.6846 30.0269 cv
34.1602 29.7847 34.1895 28.687 34.1895 28.687 cv
34.1211 28.2407 34.4326 28.561 34.4326 28.561 cv
34.6748 28.8521 li
34.5488 28.9497 34.5967 29.0659 34.5967 29.0659 cv
34.626 29.0562 34.9365 29.2017 34.9365 29.2017 cv
35.1406 29.2212 35.0439 29.0757 35.0439 29.0757 cv
34.8984 28.9595 34.9951 28.8716 34.9951 28.8716 cv
35.0635 28.8911 35.248 28.8521 35.248 28.8521 cv
35.4316 28.7261 35.3447 29.0181 35.3447 29.0181 cv
35.5 29.0464 li
35.5 29.0464 35.4805 29.1343 35.5 29.0757 cv
35.5195 29.0181 35.7041 28.9985 35.7041 28.9985 cv
35.6943 28.9204 35.7236 28.7651 35.7236 28.7651 cv
cp
35.7617 28.0278 mo
35.6455 28.0464 35.7617 27.814 35.7617 27.814 cv
35.918 28.0278 35.7617 28.0278 35.7617 28.0278 cv
cp
35.7715 27.4351 mo
35.8691 27.6392 35.7324 27.6587 35.7324 27.6587 cv
35.665 27.5903 35.7715 27.4351 35.7715 27.4351 cv
cp
33.4805 24.4644 mo
33.1895 24.3921 33.3936 24.1294 33.3936 24.1294 cv
33.5537 24.3042 li
33.626 24.5376 33.4805 24.4644 33.4805 24.4644 cv
cp
39.3638 31.6294 mo
39.1021 31.3667 li
38.811 32.5317 li
38.6646 32.7651 38.897 33.1147 38.897 33.1147 cv
38.9556 33.4058 38.5474 34.0757 38.5474 34.0757 cv
38.4614 34.0464 38.52 33.6382 38.52 33.6382 cv
38.897 32.27 38.4614 32.0366 38.4614 32.0366 cv
38.2856 30.3765 li
38.1704 28.6001 37.2661 28.5415 37.2661 28.5415 cv
36.3345 28.5132 36.2759 28.1636 36.2759 28.1636 cv
36.1021 27.9009 36.0728 26.27 36.0728 26.27 cv
36.1021 26.0952 35.9556 25.8042 35.9556 25.8042 cv
35.3447 25.3091 35.1113 24.814 35.1113 24.814 cv
34.209 23.6196 li
34.0342 23.6196 34.0342 23.5327 34.0342 23.5327 cv
33.4512 23.4741 33.5977 23.9399 33.5977 23.9399 cv
33.335 23.8823 li
32.7822 24.7847 33.9756 25.5132 33.9756 25.5132 cv
33.8008 26.0562 33.9756 27.0083 33.9756 27.0083 cv
33.8789 27.105 33.7041 28.1343 33.7041 28.1343 cv
33.8984 28.4644 33.3936 28.3862 33.3936 28.3862 cv
32.0732 29.4155 32.4229 30.231 32.4229 30.231 cv
32.1318 30.8716 32.248 31.4546 32.248 31.4546 cv
32.0928 31.4351 32.0732 31.687 32.0732 31.687 cv
31.1025 31.5317 31.1797 31.1821 31.1797 31.1821 cv
31.1797 31.0659 30.7334 27.2993 30.7334 27.2993 cv
30.3447 28.231 30.2285 30.0366 30.2285 30.0366 cv
29.627 30.4448 29.8398 30.8716 29.8398 30.8716 cv
29.5879 31.2212 30.1895 31.687 30.1895 31.687 cv
29.6074 39.9585 32.374 45.9292 32.374 45.9292 cv
32.5488 46.2202 32.7529 46.1909 32.7529 46.1909 cv
32.5781 46.5112 32.9854 46.6284 32.9854 46.6284 cv
33.5098 47.064 34.3252 46.103 34.3252 46.103 cv
34.6748 45.6675 li
35.2861 45.6089 34.9365 44.7632 34.9365 44.7632 cv
34.7041 44.5308 34.8203 43.2202 34.8203 43.2202 cv
35.1113 42.812 34.7617 41.2104 34.7617 41.2104 cv
34.8496 41.0942 34.9082 40.1626 34.9082 40.1626 cv
35.2285 39.8999 35.2861 38.7651 35.2861 38.7651 cv
35.5195 38.5317 35.8105 38.8521 35.8105 38.8521 cv
35.7813 38.939 35.9849 40.7456 35.9849 40.7456 cv
35.9556 41.269 35.8691 42.1431 35.8691 42.1431 cv
36.1313 43.395 36.0142 44.0649 36.0142 44.0649 cv
35.9849 44.4722 35.7813 44.7349 35.7813 44.7349 cv
35.752 44.8804 36.4224 45.8413 36.4224 45.8413 cv
37.2661 46.6577 37.5298 45.8999 37.5298 45.8999 cv
37.7915 45.4624 37.2661 45.1421 37.2661 45.1421 cv
37.1802 44.8218 36.9458 44.269 36.9458 44.269 cv
36.772 44.0073 37.1802 42.0562 37.1802 42.0562 cv
37.3833 41.6772 37.1802 41.2397 37.1802 41.2397 cv
37.2095 40.3374 li
37.5005 40.1333 37.5864 38.939 37.5864 38.939 cv
38.2271 39.0269 38.0825 38.7651 38.0825 38.7651 cv
38.0532 37.9487 li
37.8208 36.9878 li
38.3149 36.6675 li
38.4907 36.6675 38.3442 36.3472 38.3442 36.3472 cv
38.8403 36.2017 38.4614 35.1245 38.4614 35.1245 cv
39.1313 33.1147 li
39.3931 32.7065 li
39.5376 32.3862 39.6548 31.5122 39.6548 31.5122 cv
39.5103 31.6001 39.3638 31.6294 39.3638 31.6294 cv
cp
f
29.8496 27.1147 mo
28.8408 26.4546 li
27.8115 27.0376 li
28.1611 25.9106 li
27.1709 25.2124 li
28.4131 25.1929 li
28.8018 24.144 li
29.1895 25.2319 li
30.4521 25.27 li
29.4814 26.0659 li
29.8496 27.1147 li
cp
30.7236 25.1733 mo
29.3066 25.1147 li
28.8018 23.8726 li
28.2969 25.0571 li
26.918 25.1343 li
27.9668 25.9497 li
27.6563 27.2505 li
28.8213 26.5708 li
30.0244 27.3286 li
29.6367 26.105 li
30.7236 25.1733 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Sheila Erimez) ()%%Title: (DPHLogo_White.eps)%%CreationDate: 9/25/12 5:32 PM%AI9_DataStream%Gb!R&kutsHdP,ubJ9q82R3<585Xf9]:f.qGR7Th:)>;qQr:mGn<-Mt%$"8(NrI3p4CUl:d<-;9ogg/`BDg&E+GPgFhm,UB&2^;.:%QA>K"`m(cIbNgbSms9%bRqS<fLf-T$atX2'>1:ke+q]T+nrq@>e/L&UZUq&RTB@Q=a_[PjGr$9,O(*Uk.o']Of#!u6;Wo"CHt8TB%@J>(.CA2=3!5tSOlj*OX@G^kK-/J??o(Z\L)(rP7g9B,lFY?5RHB);;+8GSVDm=hQcBE,aHBPmT<cZCZ@PYe#i1ZWt$B1I+s07O;%?cu^3hcpuQN(CR%!U0]'\&fFq*.C`JLZ+^@r[7o/a?TZj]A@a]^6l;DrQ4gd5^Ih8)bl*i71W=XV0Fqgi8su3/V#>G/M0BND@Ymr%N[Is(.0s08:>2XGmJX*CqfgJ:e`ueIMokmP:o`+8&/&VfMgGF'"em:kpm4+T>7Q"dLN.eEKY`]^jJ/bI[l8sh<PC!o>DRM<reFO(%Op:Z_flq?8$o&VPd0PqROcj%eoMo,qoO`dI#f4cm2nkn@E*m=>O2a3<),@!&1sHDG2Cd(TRq?p%/YZT?N%7Z6Kt)f$`gCHA*W\X$%A/kZt]a"(V1[BPba%;#`h%<[u#q(sLrN=9K0]+)MJO^=f2?+u`s%&JboSZ.V/.DV>1O#\4Tr@0T*RGSAh:uOoV?.U\RtV.j"3V*#%hrL@!4+7:(0;i=dq!X:0$+,G4".66,r'pU_%@?Ra1n-%o(ZV]UbFe#og-'Y^[J4`SLV7\O*cOcuaIdA@"[&p\s4&@?U94DO?jlFP%L,e>MIFJ2_FVaJOoK`AW^?dM!lN,NtLeKUKG.*q@\F1f/U!c1(/#A``A,I%Ks5/C&L-HO4N!Z=^0hDh5Qp=FGf3s6]eem?,s(:K*%eo9:AT!bF[rJh`sPP5D2nnnP?+QKf"qE=gVrkAQDr+FNN%/]XYb)Mi;[FT0AmgOR9J*)[GBK`_MmgEs*L2?X!@Jm=cE&,sc;L-\/%GMS=^g!gKgR\m:f\-iq$j]NniA2H`0gg0qo9maC^Mk;22=a.[$_q)=TF5uEj8>L]bImK^k<>'SS!0)JY@aqEl8Ang^DYueP]KruE%n]qbOJllSHq=ba+iD-u^00ngREk$?%\7=-m;9p8+`ThlUb<<BBjh>_3P2R@qDg*he#Zb39.AY`ps1f_CnB3IIqR;r8?b'P#.!HK!%52Ec2aa36`@Y>pQ/p@`N_Z+T\@74l)erI#d)M7)8iD.nV/h7G7F_U8InN1J+bujnS1Wk+Ls#&cMar.%$9s;:..FMUpj$UlgT,Sdp%l!$e>$Qf>gATYWDUKU]lMELZ.VS!8rf?Wspd;aeUG`/H?.jF3`bl8nN#!dou(;Qc\b!'(E[:m+`+#3S0?pF9b^OrDe2>[XY9tOn<%ctFP:JBIgZ>S@\6a`9-&O*bc3m`D+,Y!L^;nT<?OpLYP0PCN7;;q*2Z")8;;7INGKdLmP*fELopfQ,OE,r^b[$[dfQbh[/fId$Fj%Hd`l+Vs_h5M;<[:1SDg"/9SumGa<QomWpGb0l;'FL+\Njo76qiHobCI>.$UE9-[i?&TjrL.![)!WA>F;aHI:e>Ba\iR(2VSaM<R;%+]ZBB"k>VSchjL!&.=uU%uE[\2qWZSUc%JT5f(@(LA,di]`qiuFJ8g-In%=1]T)ucB)VFD+\ul)1RkdCX8clFH[r;6ebOcXDUt#m%,L^"KMgd5VR7d,E+-5S,s(]g@-_R!q!$-Gd?.4;2L.f'/H9SfO2[77(9W$;nr-pkPg3jrfdgh097"g*N)O"SmKs[uV`2).JEBG+C%F]gf?iM89nFe+IcDRl\0hf8:qmH>S8CVSC@p7*i9g6qlR8^N\$E\-LSl$o+ZdI91Vh=TUTAH-^uR%1XInOEKcW",`lpcgAId$Oc$%?2=MQPg7&CrP-u's-L]454!LmDqDr0:=h"&[ae3(HN!:S-c2^er9roY!J4@DU=Tk?hu3!&a2t9ULB$'q8LlF1\l&FHOX0q87t[+e%edUU]-Nj2-^HE,Spp:r/Ha3WYT\B9HOC\bHUK[WYIt?Fr$ElWrc8n,$'_l#or*Z,qgKbZh(9K4a6+ch8Z"$!.]2B9`$$U)%)_r?h%m?ZY?qst+tYB78$_@g/t_?>cIEf8?c=2"EjOt"5H&@]5)BFB8CL>ZmR>e%O?/f?/C8dG9+\X5\cHglt@l*?\a`q*mPW7q%Pi:aeN%\WX_dj)HtpR@nQK0[?NDVVe_O4E5@q@moXkN!AY&VON+,a`6_%c71D[h*fcRSD\ha57;\/gL%>ArF(3GO"tKk\rV"b)+qQ'l)qJ7%hojSpcX!#6jf.jd>kP],j[_0l.*MTDmWX3[A<o')<`B]a\4[5([>%b6)`j0c\(;p0:93%'Z0TM@PLg.[`Dl4B6TqI2M]^V\YLgHd%SJQSLAo3IAOH7(5>)CgG&OU%429tsYMuFRbDJ]Fn<2K&PcJ23m[a9$;&gA;dl2AqKe/l*q6cgDEmsfkRDR@Kmq!#?$,TlHG9C(6u%J,f/\mWn,*BNA;HpVh*]`!Zgc0jjl&HoOWWV)=lm;%_Q]qdGLN_G<>!IjRh_F9it>MukB"2]+CQpYG+qh0g<<YT&ZQT8m?um_o<[%kk*[/"_uh5%pT&V("&IFJT=0XkKD-]lJBJs.,4bCX'c4A0bAI6]pjDKkkfGqE]cT[6.&]([$\5GX?Y5a1!:F=MVpVs4c#/n->ho3%7S^f^i%uVspDU`RrZf(R,MSYYXMDc"3sGbq!GsruCD5Ni6\UOoVnK63(.Jdm6k@GCa7X!_R&N%_0CI149?+bjLncE+1fILgc0o<D%d8as?R'.=XqP#k8K)1_Ma;MT\lYca$R`hEap1l5F$(Ah^Tp'c@9]0SnEHB@>]br$B]p]%B/1e)];[HhZ!,2'ke^$%XK`_bh%%7FC%,rqkqJ%XIa&0E)T)'bER7[aW0^p'LIDlI<4M;-:4bZU!q\CZ2n0J-nSZ0N%,Q\Kk=8[D)r(p+/%Y"qGbqr>NhVR"[D;<%hSlZ90W%nK7UJ8E,-H=r#<)]?RF.cSFj0%%J#=X6`f;)SJMM_-B^M"oXi`7Qn'adJ0I4Nue(nlZcSh9t/<3WlK?GG.[SH6AcEP%'oKna_[VM%#Sn8JX;Y<C_qJpY/1B@m3B+H%S+Ta#B/iC[@`lY/aZL[hgJ?2sS1,eQ]ec54Uto49D2+4^A`A`8']+J2Bi"`i8/D@->4I2-;?Q5(%Z#2H_)V<SIi:KAoErC/bq#UWI7K9FGS#ob37Y7bmER)!6E41BgHtc;hB<dMWIg>F6m'E!P)%?nli("\s;A5W@[?cGAI5@2:G]u':%[1GfEVZdG\GIYtP[Il,r[(LD6-Z2.*,u]n(9TX^>LkLN(FkRc.L1X#;6EQ9,"BMr)ML26fP+*;3j(JO:`gsY:@+;ULH@;$i6As_m%4,Q^ICU'%!1,bU'CI>K!D8V+,fmM/=[UBXMf%pdL2X;M-m@iBN2q['\"54`=3GB^FbDh7`8k9s39^,)O(s!Q;p1<5olFDf\0qRhW%5t!B:o:+d,d-9SYn"fUj^1<:C,2)Ui2#9dmO$/gu:Y>-Zoioi>&cYZ[n;#-X6Rd/sSL:JA^8pmBfb')Fk">9o*-XqNoDEP+4%pZk%:Yqk_oP&P2:X:ObbiMQk<'<%JdH)SL?,!G<:Usdpf0;oNo$OE)HNdEWgB;mj^?A8uc_X)0pFXQO8&C\AUcQh,e/(?C'S!VDk..8-%m-i<qkjmlNW6;UuYTk=],rBLH?8M>dBYtaf[U&GUI6&djV3CN7.$P6hQUQD'qrRBX@MM*nNq6UrO$\#W*^1mbZ9O9&O75j/aROPG%n'KV"o]`pTOhcN#cZAR4mh>K`pb.-E^$oPWipTaA*]Y4(5!66a9:%U-lOS+FSbT<OpVVELS7]G#E@?/SrX>WE^5$1#[g],PQ\RdQ%SPEsNId;ar?e$6MRAOFF@Fd[>9_R?s]@inPg_ZB4?C.'prV-or5EJ(>r*`l;rhT(McAXj!;<[B3,USIVch`5)Rt%]2=m(AH%?e("%Z'2qm2h5^rY9uH<<&`LV`EFt1o[T?o'(0=d6>]+[d&_QB\VnqSa$M`tT>S<H]^U\*+ZFZWSMn&48Z$q2L;Bb,?5QLr%j%GoH/Tk@%gG,F$.Q[q*&W&@ah'tk.*F@i;Xjc=)-hKMg=EsJt*CIY;>[FFYE5CMj6`K(Eo\8V?TgG42_M(beN+k$`^q*<@.$Z98RJcmTR0;^C%m.@+NHi8t;;X#mN]?/&=/C5elWH@&mm/ZN<]0hR(*.A[tAFgn1e.<(\F8RiogWA76Ima%8=QQa5CAEmqI/Dk\;=ct7A8ZG@>5kSZ%s%EC*-,3aB/D%Q7+N/Zi]?c0A3n25k:RR\]rqGq-fDjrB-XS+eG;8h,Uk+&q:I2MV:/lUMrGPZWgf/ok@Qr/@&DG3Y-G0kq^R.K/%6g'H[*uRn4(L--fqo(k`rc58K*L_Pb)EPqQnMKjYT^!X[2n=Xc>BoR^^R<Eso/p$#9s^2j:-VO4H/O]j30]sZhMlTQVlY&NjbY+M%F8dt&@Of2rZuim\Q80PK2!11Sd.HD*kl7YN1Xt[f1D;`o5:%>tPCm6!-$i#[nMH@)iU6u):c2EU3>D[i3C+R\?K`RC9nQ9%NaZUV%J_]uq@4n'l*ptf#1\5:MK3EQQd(qmo'dDU[_JDgWK3fkenn.<n\foESWC/pSD%=d9Md'rMQ(#Q+#YflDQkFVNauPA`0i/g\'_Cj-%-Bp!.7U08B>VN2'=0[jJ$X#Z6e%c;<8s^K*N&2XRS-H=7Ms_uT*&f44qk'c2!)X%O!2bJ>jI.M=7td5Qh:I\u5'oB:ntG=Zd?]@]%Q`nV#D^Rb;$PjXVAQa]hK$)h2>>0O=4Wt"/R;[.2O-p5kB<H/sS@Q7])2c2Ha=5\RWZ_?nlMJ[LFda?GVu>UhM=t_,qt"*tV54LN%&rj2oWV3XU5Poe,/WJ^@E3as:HpdXSop,:2BB\DcrWO4PEu<6ObMc*krcsoqhBk"Ml-jZ*$;E]'TEV@9=o*F>Of:#&3V=tA%!i='%N7,%-nsIXe<^($<e+9'a=:csa6gA^^P,9`.;#u,fZW)YHB#nnWc*IQNp6:/AXgId>rLLo7!#BFpQLnV)s.,?<r.X#0M&Q1ZqH??R%i"0;F,.'GHKAV.LUl!TG9!B`"6]JHl0U>Sm#X[!cjbq;J2_XiYF:!("6\.ED/7b+b,3i,M>:7`B@!GWf$i8RJ,,NIPUt&D#2?48K%jlKb=p#Y2q'H0-)_iL.CQBW6"s#hr4naojL!^b4GhmEmS4ekmjYimIWHtkU2#fAJI=;Xh*-5L]&CAsBZl(fO/BrCr%p]Y^K_S"S-%Mm570&j-6dRg`/?X8<R8"e$58`irm0B2;Mh.[="7M1o:Z/7ugEA&X[oae9S.C2?LAbT!!*9*A3BAfN[U,N2Qdk^0':;DR$oPR]-o%8!#p2Ye6p@V4UaS3s:[&#>1A?MBn;I1F)s(-H2p4ah4;@S!&(L^L33hOeJa:VG+Z!%2$MHgfA6IVaMFUVAPV0KKI!,aM6[7Tja%F%qHiit?SHQYW/QXK?gf$ur@^WU0G9d.fZNYtnaicK/:)nFY[US8SJ5XN+#sDK,sOpb*^4u7qX5Nj6>,e39MCkoSVSq6f&;S=m0Gl7%E!Bc+I6`EHRfABNcACjg]*Q'L2GP'*;2=Cjc_&;W/FT2%Q-*H74.tq1069(thk]T,ZSm'4_t8c9@gV,H+aHck5>EGq`JO,%llbd!%6"jb3k_/D7=[(%t1iXb2D1C_q_*V;tXcTH&\P/rTOh@o"nO=2'Bq5M89i5_r(`"K+`'%<*nAN.UO\+p)mPTXn"eH?Olga.DJeJB_%$1a=($r.dq-BcuYE+f@`NJ,Nef_9fe7O[7M3\*jEnDG<XrmB2+(;$h$SQ&Gcs,&@H+>(W4jk"l+bPM9*TUibj^BCmPhR<Z3LT/H0%/XXmV)iJ+4:[s]`ro.!mWFUY&!YJ0OIqDq$)T1igk2r?=ljhH8QrEC.<DZ!FRH"%8+onJ+OT0dGhS777qZ!T:mG6hr")e^glh2#=%2*152GYsnNZkJ;C$$WKV>I=`7:45OJPVVo?3Wrf>s3[CLo,B%Ti(6J%l@#lA`#<T1Jpuj-E1$NJod$6K+!:(?^I;S@;3:bCi$nk\%8F;=6"=/g*KD4__3V01&'P=8+h9h<Ndr_RIOnih`[."u6TErO2\):]"0OB?11>]r?,b,T5MS4g4Vg=cEXeff,TK0TL3kB-R1Ul!/%#)]hM(QZ>47,uBD,n-+,)HE=tLSaf@De?d98YlI^^+m74$;2/`Ze<Y,Qb7W,`s>G=o92rah;tT=7.*ADqdu9KB=VT>U;IL_O)>G6%hD:"P8jmrEci$<0)'"PL_WfaiA[rWdKK2k1NtC3%]48'?GK&Q3_"31Jb,.thn)O'#D<NtT'<:fCpa(ADT51h*8ckb-a^<>FT7k6c%3Q=ugOd:n&l@:mY?A?cG@ge+`0^Ied<KiI:d];U<P$SCt-XXF`][*@S6KA=JLVdED!7=)sY5s"9!R!&f02%XPPp(%.Ud`TeaF9db%>@]3X\kApjXE*.AG=RLob^BBlLss\LI'.ifN)=-F8OZ2pJ7QtIcf3('kAa:l;n3[e%\n5)!3M<egYq]9N7SU">N+VuqZ<>gp8%_o%ms`5br@!$u>*hJE![SHqaQ@jdg9KhThM8ocqZY%.P.e#IK;TtW?;9a3gJ(iYVei&.Ge[sBJ8]I['[BdQcj<RQ):"ka"nhU<&mmmj%cQ8rZcQA2=(Sgt&2Vr\9Ao<7/n''U9W!MtR/\MJD!Ss;\>npgFc=6U-QYI'l)gAduB]mjU=m*d$j.gqjj7'RHrrRLXLZ2/jJ*@L=%Z#c\]55$89]`[2L`50RI;>nN<.0i?7DI*SPq(Jjq6ZY-`aM+Pk7uN(Q\I):5mGSl3,"-h3pjFunHfaiq(GDU`$%ubpEJF2PpZj?_%pYB/,9,Gkfo?D=&ChUD'nW:q@nhtc=[;47t$J1i4)afgQhKrX\o4Z83mur2D4F*ei1WJZQ4^NLdN>=f%CA05oQk_57S:`E(qB:mC%3WE($?0<-h#2YGB04pdlE1?mq@$8ug)XgK(77Dd?O&MA]07]G65nrCd_XhEZ^[c)f=H0@VYV_4*LS"EFrH".f*ur7NZ+6@J3-?r1%iup64M!8e(SS@*K.n4/hP(cO),WjP&hGVZprTRH1Ys^W5SIs_ifD2VgB<:UX>9"UGRJ<?Km_S>+2`$YiRikO$cRascK`?F"3tIlC%^X-pklATB#(aLiW'^dbDiXWS[+8N+p3ETgd.\tpe%u\!BgNPB=rk9m)S^A7A6u7r>DitG+VAo7GXl=&DU$3#"ikpCjo!.q[(8nJL%S<mL";IBPl4BK<e[3):k-#T:qb%YR72%$15;AniEht'E<R4&gbARUVIoXDUV^W5TYfDSSL42kPZo?k0f,b;UI*GCsapi4V%'ZW4J%ksZ39^C4%pfcPe<duiNHN;`D*5@mae3%[/52p6UEI6Pu4gVq$Di5kcq]\*/*Nc%bb<IVJA!:r'm7\8$7m0>epH,3LmO6+.EB+XE,%?R(O5?Hh:j9AZD@P+E].0CiJ6=k&+5'4<]4"))Q7WL3QDB3"JaiYUYq#Ug9X>ccr4dr1jfie*kN.HTrJMilph%^si2Sh"2EMZ/P%%,76&1OcF\/pJ0UCW3?]0!MI*J_Zp&?0g7[E"L"crS%56!/;2^>KCikmHDm)tfaWPj\hOX/WHn9,:H`ZN9KZ4`7>c\'`I]&fNkQ<t%HW-DU:ooZbSbO$U8"p"t@ehcGrMg-Ed&^e*R4l<8(8-%DZi]1kmtpm9?A2LcV"_nN8!9l^HSR6TN3=MaW<ERtrA[/!kJ^Y5W_]YA%C!P`6FF!^12\&WF6cTj0.Q,[B]Po9E(SS1Yk=Z8,_!8RDLI1hCLD&$%-BAoYK]!L-Mn<N\lZB"_<1AKL.L2p=E&deQ"Rmn%C!:b4%d&'Qd=q=qkaHIF.@B5/a,nA=3%@+Jn<#>B"c!OQGPQjdWf38''YoFQ@#Q,N/17hXR+PrBCcGj5eY)3>CPHWC(0ner/]]olmGQ:g<%YmXDkfmq&]V`8rQKPl/\+Q.UbY$L<"`3=7bR#=ftbV$)Nq_<L[/-`IF\.Mj!>4.IXs5gBkM,.qa6E0d%6<0&=/^][*r3q5(MGUHc%rPR]qjNu&/MBB_Q%m#jqVM1r:6:NNN(MN%p;Y4<c)EIY&1dC4NO%1nd]7:Z<l>M?h8>MHq4$C9c>\:qJoNPf<Yekh&D3_rhRntJ>%bMLIAH7-OV9_3tD0T;F>jlQO+6ll3mHEik:"t$N,n%7o]QcDBFV?;\XY(1pA)=U-kY;5ci)Wp-C37_QTbZX-\%mDaX,^Ot\6JfLa%@#i7?/2ud9q8U<V6PRgejkS0TpAdWa#O0]Ap,uc^S/s):`Q$6>+"Od[$gEka#B2bYgCV>Ws#Qh7T*JbF^S[F2@Jj!#KNh7:H/Rp0%?b']um16O%]i?3WU'(Q\+r0mp=@r%^^Yi\;PA:Wu_1&JlU9bPVV._>I8\OCI"4Worqp3.t$Fk]PPBZ;Us.e_)_"*tTMOK2@;`bJ[%AI;_)oD?aArgS6R^bdXkR\V3CEoVKs7!PC9C+XZq1*Em..O;X^c@,9[]tGtG^+Fi]?A7g$&*^/sE3Yjefg4Kh>BoSCT1pG'JGeM"%0luNG8UDk-@$,'9#F/H'`&^eE$bdp9&+"b>Tj@PpGF/:,9pJBG*t\.gJMO+n;k`kE%Dd]lP/>+`W%KGS0sMealnCc`Q_)1n#Gg9A%&Nmi1O_F6fGZsIXm4#54c<M:KXabnhiKShjF^lQ#%q0nQ%Q5G-4QL.aj`;-LqTb.!3qrrm?G6TUIX@?0qi,1sc,CVUf9.6_cd2E]%R!LZGbu]A"\!\I)bK\)?+P]c)VHI\@OeK8^=*CjeH!B\&hnC-IrKXIO\Z#]Rd>")RY`E^2^o'dKbfa(2jtdii/Y)Q-TpTa_1KGXP%l''7!GY_<6.=^UXU3,Yk>B!QEMEV_U(<\#ok+WERa03bA-i<Akn'$3/*n1<[@)YS`H4B-o-]5GcbE>DM,Z)mppTFX+.Aj.f=)YMS%Vr;4$?1d$$r5)tD^57OE/4?;5G-Bs1q8N2\IuKuJ)0XRWA"f8bHC=dsHp&[Hb5%)kcsrVkLWf8Q:/j;UTuRP9pS/<T.$_hX(,V.t%-Jgk3!n>glj=5?GqA2Xopl_+f'6#;UJmmlfD$1(B\HHOE%XI:uqZ8tp0JB-:<@@m>GP2iKEk2B@&8;!6Pd5Xr62Tg"2n1tam`sk`%;nS/h&:!U!3,L1R%)f>MFcd]*dGINB6CMVg7ophsp84i[@>uZ"WFDf>$gk*fbkheF]s0ULR1$VN^m/2f3OFW%-Z.kVdr+0q*`@`^%P3oEW#2(l&eX]I4/S$009=%[.O1'8,!uB"%=i3^+?%FL$W/<J\U;JY38%=k*AP_r%&s2LR%V\0H>8(GQXm%`A/ZhQ"a2B1H2l.;c%C-B,9f\\`\cD'C@*U@"3W/Xa\.;a6_q(p^lN7r!kHOpgUXgD_Hq")0P(g5JHrl:S%p&B`S]@q*%8)KB8eRGR-3ej5.2pulfN'+T^%Y)RV38KVg)*SXW#Fb[6d#emb5fW6$_beBj\SX8(.92d'KhJ1n]%=9k3[I*s)drX;X3`Pgr>INdTkB8,)2@E6mV^Y\rNs<ul3coC:%Rl2b3>19?)ZRZ:[)D@i@Tl*IrgWZ"$GuSD;Q.(##f__"I:V0bf2Vq_VgLT+:DCt_bZ5`O#g6mm9pqShX2FG'..m7`BZCp%OVq(1Z%1^-UNX\^mk\2Q>r5]*S%9V]T`/BunA3YLb=6\ELf1Ki17DDQCiTY'!f]ECF-(Z8G?#38mH4,t!VDVZ4ljhit#Ws<UEF]u:2dO5V*%6aRnW5PEf=aBAsJT!/.ij%\nui;OP!VG;(ESW[.hWDL_W'rktJlE#-+s))"mBEE[t(s3%o8ucME&JKR>[9)P4aZ%[$U>0_S\5Q==%<HI@;12Y/MZtO%BqPa#mP_;s1Z_lhNelqSHBA[a,g+X[fBlcl#[\i?;`cb*r`R7rUBkV*^aO8%?%CGIpLiNA%RbG2l4O2Z8)A]bu%f:'2GMc%Yek9,uD_'NLtF:.FSj941QoqW@%\;Gdn*k"*f'gKX.,G/oaThrW[:n^+;g&ES-LIE^58n_X9GS/<?@;EI2gQ:.BGR2sU%p;Z;15A0OSbVL"WFZ,e<!u%s'09l:AW&2Oh6)9VJYP/7G]8d6.qJ,u?<O8+UW:4r4#:_ZK/*BKkgL/!]!GU!G#7$5'(#bhQ9]tWB%CTUSMVPT9^q$<8:l[/#lZ-mCmD)K"Md+Y/J/:>.qlt\Ab'6EMK.93[^m6LR5>pJru9(4<B7[7Cg.h"#ESL><88J.N$=K1^EDat/d%f/PZLkr!SfM>ng>gN/iFGjK+*U@?Il+$8;V2Ol=Ibc;a?EcZZBj$r2_SZG<!lHKD,PN<BIEoK3=ZfQB`>T'Sj@Tk/t9#X#Kd!;B,%ULKpt@-IN$_4og(mdrEZ.PG\)hscO;pABB%c$q$3KC\!W=UV@`VNeP`kj4?0nH@M8R3rX=h7:1i:hjt7$!]\B4Q2nr]__P`H:#ec%h%RMKb'P>^'goscRXU2Zm`>WM\N)I\K$NH_h"f3-MTq$[a?T9kB=q@R=6cc'WU`P4kOQo1WO$ap4MAI&<tb+h=?_.l(+7F5UG.%C%VXi'Pk'cbNF4R%;).>()@?5:n\Oc3"n5Xb7iK=41fkTLP.(7R&3hOYlk4aBOHpP`]3Z3\+Zaj1C1mn$Zi0`dNdhq\9$?l,4bteAK%\.#3+Smsm%4>6Lr1c?.CSG7=!$\+Isn9$Oj8,>8n]6_.J7p6P^j2m5RW%$0hU[+r'CI"pEjnk=+f,X%Sa$6'BhO-CP)Z@f!0ZfuF%eE']Xc@+ZPL]u6%O2'dl(<hn]bpTM^"g:U^*Yc6!bBkMi"g6+i8epe:o+jmm6Z9)ua]K_bUe6Eg%k:I^=KJ/I7FJo.G4`n@^otL)%?:%ieq$c=q:DUi#7LHf\0'MK*$(Uq5>[AY^J^mn_^2R^d\I]nF-7c1iITj*H)B[fU/6&Dp-PNkhg&&%`@=bf<iQ"-R2+9RP]WkL.%b<W>S964Q+f$aa$ga=)fb`L,9T<pQ85C[r76V8(,Kp7H/Yio`mW8<o4Qm:^]DcH8/HtPLgKAugI4,>cZAk636WYAcG>E"h3o_#rI%2\mY2`+JUTm0FjEY)rCd(d&V_Sh!&U9O1ub=K=cs.3WOtr!&sE]fKg<UkRDd;)cqd1f\rQ`6FCT]^pdHhcq!<hXVMc&a<;7f!e&9%*dm$((._d6<'Ap(A#+q$$j<_$?7Xi<G[ZK:rc*BrM=gYPI$liZMDRQlP+rr0-de0o#M$_'rO^l#9p%?6oY_C,6Rc%S@\bW[a]L&m%A'1Z#OIc[qmuO(Y;l#K;m@Y=pd)cR\a%'b3BL1QXNdA=J&""TT^A7bVb+Al4OhNEA[hpR"0<8S'eO%;P<_/.ua6hc`3RXC=@.obO%k6so/p)/Oln/L=<#V;9)O4R?r+Di,M8p[0kT.M-l3.s,q+uD66-\;$RkQ@WdH[I_-NqG2QG9e=P,_?4nF%fkFa"^K3Qh$L98>ENe%pZ3Pb)GuUu(.gekURp()^'I9Yo+b:#3_9mYkPdg#5[I6`GiL#>h\O=,*I._tTp,'#-"$b\YuOg!5Y$LmnLl":/r`D7rUYPm1jL%j%O0nhHocB`7V!RnE[>L(j/7bi;0CsGcV1t(0.g3R]*$79pDD(u=Z_F"'RJ-D!jCM-3he#=(aj#V+l_WkCA]o-e?+bn-(2nUM\i$Z3%R_=Cm.#'nAlqnh;2:F8@p6ZYR7l5P,_DVY\T;cYLbhe@m_Tc:FDKr5+IX/10l.!%Irq478-[kSg\@$Rn32p.f*mW$f<i@sD[i,Um%QPT&cO6^n&l*GV=q5P`p7`=r$Gl:=ZQBV]F:om80.<?A0IEN]sZsF(gMmoV`7dfn'D0W*XXI9S^*mOOaMm(=_NuWZLCB!oV;uAcd%YQ=@)f6:VbJ*.o-ON%*ph[qr20c"[tJ!7sH-^qee^=E"j<ePj96F"#XMo+;N?[qu2A:8.^[e7S/*JB-@'ubJpf>Y_F:!`b'0C%rF%pNpmfqUYOggMQ^KfB6aaB="q*>F1[Nhtm<8I<>-FPJ+K:c&U0*'dY][I#R3Z2dbG6mIE't%sh#7TD7d\`Sg\t+IITd[a_KZe%k3I%M>3rM8Ym']UL1+9W:FRQVhAZ6=_O[l/3Lbk$1/&^miFXN`]M,(+5M:)s!=m;^XZ0YRI`fr+5dMi%0Z6)l>/5+hUL!kT8GXP-'!Bb%N]o%7Y_/^HY>YVl@B=t0%Y0=Y:k3L4VUq<D"3,OcMb(\0d6qc%;hlo%s-FrCm'MiA#$SXB7EYj@XcXY=h]nFXWFD1.Ys?GR6Bj<=%:Hhab3i(#E)l+cUg_sn+1i"R3=l`k%d#-r&5CWDX,:sAt"FefDjm#?>o%p841e>7!a+l-B^iD2X\5puq#`Q91C6"No2Q`)_'Yc)f%<9hljfYIV<7$A0D[&oFu/<M,p]L4%ta,3"m9;KWNH*AK2=@Gip$iO0\NX`<eLV_TXkj`T>6sMCWNnW;/p'e6FdIQ5Xbi>APD##gT%C:"-_Z_B$90@(*%$X\\fU$Q<=9t29ob9?oS!Y\&#X<R22Rld;5<ET*;:2/-83'W)U8hPLhQ)E=jW(5`<:?m&h/di[o:/Y#?pYM8p%!qb0u:G;0*57SD25sq)6b4\)M?Li1lqccIJ=9:fhH`9u\X8)db;>%Dp7$a]imJ'Ip+q7Vq>sOaUbIH/^Iir@M"WC:bDNkao6`DtJ%edtYFpX2D<r]EZ9CDk(cYe4(^C2W7"ThB'SFVt-$oHa5N$q4_BBFM.J0N28[-T_6HViAem`ck0ZWb1:4H*nm85?^j.ZPca*O$.F:%?`fg4n<LpF-lt];[Q6b=m7GZr=O-*5<$0"[2BnFrY_G$A]=\X+>pU9ZjnjCFb#p3$.2:6Oeq@o]q8sXRhMU_UQ'6EhI!]a,GF'>T%%'$3C*ZJ*TiAERE,#Cb4=$82)g=^^(d"SrS8HHYr'<kFrQCK^/W@Y^=/8Y39FaFu(GgRjD=(kZ#&TkucD-KYE^iF,Td7L1GdEqMd%N0*o/E':1]M%!O0K^,s/*n4&$Gt^/s^bHmq\Jf=>Vg:/(Aj@+MVXU%8l84GDL,qMrHF;tAhH/<(;l]KdLWQ:OPIDd\=47+bAYj;[%V?q#t3Fi4C(O^9'bT%<fSLt/:C,6NugpIWlIh(Pb?Ks3l[u*d&Mn'64_W6J/=7k.8/_]QBflSE68O&p4LSP)n'&/'u=pJ-9-#^_N%-D<4_^G%#_s"&K9r%Zmf`238P_caa2(M90Mh-*]k+ANAE!ae19CiujYePeg6=NspS0MLe[7NF.*97!_?0hX.fL@[J<Q^`=tk->Mg%DgUi-KuOp5gSMi>NNH1Wj1qJnHp<Be>tRbqmrSac>rkR!IOooU5/1t>f=?"KkAR5b.TY]m?%@'GXb(u9>[F>Df#8YQrR.g)@pi>"%^\K!PYAOjbdqdYX.Ak^1)cKGQCe9T*A=o;&IGe9uU/KY!4')69oDGOOMprZiTlFbjp"4KAd_0gL<uc$t?_M:p`-7<cmkXLCbZ6V-%Pf[\.l:`hU]ddlp8:5LD3"Pn:2Ni!h6Ch"kj>;j(0p^<o<=2dtiaA5A69IV*Lo4e;Q$$9G8On`Rj]43@-h_RNj;8asWIUt)b!(5m%S&OH!8Q/3#lh6Ef-Li;USMmnCcS%1D@$/sK+=k+$%Fg/eJ3Xrp@+cimGG@oMW;mVRdtlfJ`L[bDN:2#?Gi*OhkK2I/H]ku\&j=!+%I0E.:%%ScLc1Nf0o,i9C9EbLNe>+%>IBh+@>/fR;(Xs7Lcud'qY4XT<?T8d?bHOKoOq=nX3tQ2-<>hEA$\NsS4[rd2*CS`LZV-WS%!Op45f]<a]:Hl)QNMZZhOs+7pOsj23/gtn)P.ainGF=XR:Qkba^XMfZder5sk]4WnDirln>uJB3i6gYoa@S?3d,i\ANm>$Z9?/)"%r]$g/Yp9^snhJlE#@`t%!U<eKC\4-ud@7^@KAMk_>E^ML.pXm@dX'ob]FLHGBb$<8LKi2%p;]^RXOj9!H,;Vr9e1NGaQd9?N=97d%Fq=.A1"sDppcNif_/IGAjgNiUpADbM3Z*t%T$o1oUUQKiQrX3F_;9$!)#Ij;CXpp;pp,]:_Ids^nR[PAVDiVuIn7>("%Mr_\!K1'%WRGoD.,g`K-W'@s@Mn^ZWi4Bo'`o.l+tnVim.7=b(q$D>c=&l%?LGn8Gh-\)Sn<t#4WJkm\Nt/`2/s%;B*lLQ?B$slNDA=5cA$L<%'CVCje#s=#A41S+K@hC"a2X2R4knQq"("JU(n@]A0;u'TMa#^-Hra"\e%J+HC>;UOf.9*e1g86oUHNFrdB#)K+<,[SB_-dp[G&.r%DZ\./d7:X1%Te`'0P5N).0h"_rEr^[Ik]>b>KHf]jr2JqGCe`>Y0e<aZhB:8Hrr"lV5`>2+bn[jAXV5_d7r7"AJmf"Q4D/f'ZIPG%]&J>B3#+8dl>jK+_82_DVhSb*m<hJHVUJ5\.N/$+e1:US7*/ok[oB]Yl/oT"N5GMSqr:r<SK/EOjWNVX_lSQ%FQ>@F%6chA^tEu@%"GUCN$*LGDYD$I<3L2;.l"U8([UIb5c5)/2gkFT'547Ffl^7>;&)4tW,!H]LXYF4@*a<Ol!LT)?dF&fq+q"CZF3Z':1XnM?h24@5%T$fC%@ZS.rpGs^c/_nI*4du3@Al)ah[;[*g6[N#cCRE\h'sifU1tY.%,s89_64(iXhNt@Q,GELLRFspW<baQhWS9*XI0&Q`]4Et%%,:/XJqht[c(=m_p%Qn$"-Nc%m!pRML"]4`3=Tr#8X/FV&lZ=J1[^;!LSfGn`h<HGF!m6SK#EKX(If4FNA!bDnP]3o1nM1rYW/4Yl%>+-b\I'TSWC<paK1lIo?f("4<\<l'0PR`?S,4Y$K^cjYs]&bLKT`0nI75HS9Xkk1.$cbrRQ=<V[a]9noqO'aAXP82>$d?K,a@0Ss%Rr<j&cjj'4-XmQHAX=1@&MD$H90"-F@3D&V:%2lCB(=b!$(gY4D]Mit<BUpKnmPQbkOS&=L<dMbDP^fUb8NG=$9Ag5mTr7n?U8=+%/\"@]SUC[4^05LQ)ERa&3gY%T20AO,FG=PHX_[.e/*L6prRB3I=4#p^*IF`YZYtW"TCu)KB4!s&c,/jG6YBal-i%9<CZtC0P-$7Y%VIn\nm2gN<8tbh67U<=Bo[]%8lS`XQ[J^U#V)2N9N]V#la(ojO3m[F"SSFY\-+@4@X8/i@RVbHjeLI'=SRt0C`F'ho8JM+AT+/$o%cJue`m/"jbkMqK'P8D8-2_=*mmuhhTj-hfl9p\mRk"p5C_kK/(\u$@rLp_,=cXm>[)f,[$Z>[,gjLqdi[5kO:e?kTVZ_?'`m`M]%%[Dd%[SWK<e#%d\;CW9I/Fu*L60h+`MMqthq$DQ.<5T#u5?#=8d2@MmEP\LD3pGW5Phgu"dCFQ&dYpgT#Eg+X9LH;JYn79;Q5nin%%FCuGn9PDhZaE40i;lPf'BaNhrfY2%-QEB\tN2a/VM8R\TR\X.C.j3P``G-N!(\X=uJ`49LQ??Rg$[[),P<(o)UC/(1Zg3o.G8P,i%>cC:FldE/iir%6!9/`r[=U#p.A\A=TR6!k0QT/0X#C_:d^9RW>",@iFnZApMZ"=2G%Bfo952Hf_W@K(APpr1&dp&(X.JC>"C>"DP%ek7/*%oUhhgJU_;p_@Bk)k@bD\\TBB14]-PY:X.H7,9V:Bi?Zte.u'b</"gbq05]!+)@[!EIQskLiGE]p/Y)'2Sl!()%fQNH#UD(%#ZQOi)RX7R=*:AlBVI)DgN&$L=%99$*pXHJos2?(*7dcA#.CudL?;`pFl]du>fub1Sg^M-3:eA_[s:'8pEM?B<Q1,Y+kp0B\^G-'%8_RW"<0BBjgB'AKX^bWKAMsWpq.%btYLBk4if@6jC#O7cY4cFM51c5u3MhpZ'h?ROEeU&/(0FWUBA"Ru4YeL"gF+:Vdj9/n.qVjk%k:@jaDKi[EU,\Vp):._1V_@4fN!t&tR');1S7H0Ul,pj1]@8GRA7Uo^^,9?:k]3#KN;fs\]&MImBI4T7Fa&W41:5:^1+(P'M8*md%#]&U<V':&oqRfNX1)>.a7$r*Ym2Zu*!,ZsNSEt'Y7!cCABV)m0XPYu)`*&[4p/.#ur]o6,(iU+$O=XXJ5=lkX1p`aZHAh-c%.,UM%q'J+SI@4+UD-^7J5%`HY?r\egY-)ZK]o8gM<%C`<le0n?WA`&1;L&-E&R8RRI7TWhPFZR@"3cNa_mX]4k-s6171>`&mJ3@NW.uVp%@Fh6nGHQ_Uk5;L/lf$'361;E,DPnMTNpGZTlqlM:4WN%p4%nMCH8s@e5qVg9DHdWag^PP_s6[9:cK*bX"DlEWE"5VLfL%flAmViK%qY"/)B+g,*/F/s&b-h\"L3g,!4Td_$'59F8f\3fVZ6s[(Qc+'Qs0-iq4]4TVG=&HdA%+8HnHpq$@gJYbl&F\`@5tmMfFo[6EO5H^%q"5Qm_)<HKh!Zf9^9&6@/ENQ<2Z#f\SId9[s-Ql6mA2#lB&VJ"TpL<fX<knRO'.?KiO-3b3N9h6#C>i)%%G_ZS-Fr2fSQ<.kS;"g%5n(.t5R;Qrl\<3[?;ELE:!7RH2$0X>@V4G1BNe4_V_t1\L($'noPCW[D&6#a.T.A_;3C_O\&XA*!4KY"eCVGu<2@qInU4B4[LTIW%p/%8ZU]R'WoVSKlbgEC6CO9P05&FJclMMK4D+JKWY7D"sc(V,+DDFO+l6Q>e'erDYf1^k(]TuM(B;rrF=pg&_Z*cZ>oRkqn'[CH"%p0.m5;r5rB.GSNTjgM")L,4WLB)a*PE2Hcl]pHT=ji8@\B4*rpVujm4aYniKq@+(,SHs0+a-q?::^n/0am!=4ZNhKrO:a2F60(-&%0^ZFMOQ"G"(\H8A\S047&rt5f"]XTmP,$K8EDYG,k`S;nct#X@b_),\\g=i*RBj0cqV_f;Ks-gr+obe`eC1Zk[T]'3T7*6ck6JB;%S'/f(+7k9$bBj.M<51YeI"ln@X]0q=^0L3m[Ff&<WIm>'$$!OXP>?(`'Y@YCCMU1O_%'dCP`+?-)pOg0IAJFp9-nX49rha4-d/MG%F>G"U;dkHbe[@`c+/2E9hlM^kel:9r=_jhs>&?p.kYgedX'2TT^;A/llrK$#)Pm3B0RVEXK%*ohL+^Oe>#j3p!LjG.K46?GM3KJj%:2:V9d=$CKmQ1A^<UBEf=6t+K>9b`U*^6Vq=75,?hXn!T<_2[qaEq3,=<[o3<[^'Eos8s4%P3]kPA[^2#1$b=g9EZ\d#Q2*YpK&\%9P,80$md9ZJnd>TbY?CHLoO=8cbuL=m.T5<h/[<'@"GELJ:<J+mpLd3ZdPF$_l4Qd>l&#]Pk`Cm/*fslf'Fclhrg\$YC!lQcKlT4%dkb!I\k-eW/DSCAB3SG):0_+?brOe[I=8PjaK=.I\#2m[/B;CCn!h5.\nepbp9"G:7!Gl#;KnG\p@lTfQ^>h*oCC/7]/mQSDI',`%o4kjRo.ZY6e!\/UC)1\oeT>E2FQVc(lr$PjQ4l*;QQ<-kb\HBcW-mB.);B20rRTM@#-o(]X7oRfB*N,<#pC6he!UC4c7JN5eT>Eh%1`BT/VeS9!=usRDa<%AGbjm=]F5cgi9kTc-=/4Aq<R]WkF1'&'3jW!NrSGqM<7@6QD*7]BXemo?P4<)Ch5feak0N/Fa?=ZB9kQA6%VRrOFWhru([J!AS/ZS':IER%>dqqLXXfL\e6(tX7p0CD%/]BWKVDF.7>^NZO1BW/CX7odlB*Q/ZpM)aqeWQ1\n2j_#RFT_'UY">&%l-.;joID0`W2;AOV)-hlh5feaLnVF4CG44[%P#$_:ebS'94r;fhsLO'\N`<r!MJD#Z0sP&L;O'IO+H^GGB5_oHuc;?Lj-,mqs)D:%AF!N;F^L]AGN"KUCN$Z30r[JcA"ECK"387r$fi+=JV%I`Z[&HL]AuKt34`C5,CVE6'%u)\iLle!.@n[@;V5\#)`mY^9!>C\9-4b6%X?DUsod7LcS$bt&:1M8E0=oo2B$L7B48h0@c<TqbYIV!j0UE:#LRhamB2cq6XH:`TRGdf9PGO3*Fr\lj&h(2(EJoHbm[Rf%0/pZ6%a"jE'F4$PB>,@bF20X*.gEufJ/[Ie1q*XAmCs3ihF#C)dXj5ogH0_F(Fo<(%(g>A&F"P_Fib0tLn>ER9e@^l\c#j3Uq6M:4kMJWM%h:fQW/k6Y2eseXh<i$tVn9`hV<j>?s)*-Bl%9lq)Y1=9:7[AeSr+md^oc@)8(>[t:"ljL!qYkY*eb?TnWpXgbe=)BA[?4DH>>t>7%fQenK6a8``gu[?#c?:O1(F<KL]1O3#@aNq3Q,;j2G%"eE$YsTs?oJkP.Rt1g,c?!:AoFN:T*gC)jVAe\Gh,&C!ld4R)6U5MQDFHG%"V%8LE8R^U'7mg(J8kfO4>U<lZmHEpgdD%EOm?n+;r6AK0LW?iD\\b$M.IjJ-F,iX34`d:IHBK\E*%6-[sC[:<iaafc=Za>(ACq5%*)XB9W/UHrDKlbS5sXcE))baY7D;iBV3&Of\$e'2Tc!3>_jst<Bn"+Y<arRZ_qk%\<c<#rSW,Rgn$q+Bj^UK]Vjm8.Ll^Sco(GtJ%A9GrK`hP:Pg3]YKaiQu8)rGVDk.]I:C(>%X%<kQC2+O-8p/9NhD:c"P?C_n`[LPLPeAAee(Y6#)g86;$#=5;kno51o[BG'lea8it%F%,#'Ra!TL,6HfiTs,:uOZ,>Sa("An=J#u!h--R6'@O1Fl#EKpFq]_(l;pD=!tc2$I+gTaV7H?FqHt23)rRBFl!n=][IdL9D&Lep%7@:Ec>r+."Jc!pAS$=eJq;`qumA,R&@qLPQ[uW%:Tr6?`-KS"]<Q,+UD-/=NN>t;`OW&@G`oP2qbXE`\`t2\$7G$0)LQ5fldP8];%/iKhObs)).T%%.oAj&/Jh6J5@9j$Iu`J.45GXpe[$"O1]1c`++&$rQkA*r9-mG3B+?h`3EA!?)Sl?U'4CYG@6AZ0p`X)V.9Q\lMB%,%gW21:(;)2ERhMUdX\N>\L^]q<)5Y56"lTV))]^r\Bh"G&k-0XFdm#eu,h4nIG6JPHmi9He9C:_\]Y*30tErVnL_fFEa4UBj"#/%%i7:kgfP<M`IEKr;pRk4PP#)`f!U#!K46cOM3KLHB5c%V]"I)F2Jn_H&a?4L20Y19#-#=/Cc5(Dk*k(ZnY/,5l)/i:;>YRq[k(7C%/O*su,!;M8-Lg9A89<saTa]7d]:OJI06WV1,=\#P2:hb$mdD`i*`m\Q>q;^61SjTTDrUHWP9kdZ_Y$RD!i];Q?!_24HAdo#/Fjr"%9rS6i2lR'=\MF'Em7o4e8UIRNgoj^J&@k&c[$/^EPrE\DA\frNLF[R5g#e.?B%G7FgLQ,1/n_]5m!.N3s-T?oI`^p-'c7/n''k^V%5Gqd2'bE9og1W!q<FHQh@scp5oocf>=Ja?[3liSsI)[aO%]7P<AsSe]Am;<P$G_TJ:MsO)[VgktZk(_"5>;R1\aA7Fr$GW+f6'[2%RO7UbR-;h>C#OHF>q)FhSp3VJZ.Z%?-N.*')lm%AdE0PjFYg,00@RRsbF,qf00!7O[)p/DF5ut7C0Ueargp-Ph@"[4jaj,=m[bMI%0C7ZQ7[S8'-0l#d[GE[FCtq*UfZ,/BW!:U_^"D&;"TbsdV<&seB%SrgAgYNtg"&I>I`tPE9Uf2Q.n4]D%X+3J/m@\2,HD,GY-6:d%lcT(./$kH\VO62I1AGAch$/JZqGS2hreP,2hC[Cta3=t5`5VR7;]HU:]c59X:hP"4)QS#+Rk>X1GA4Ja`HTn>4QjM22m2Prb!)XB%8ceV]hR&NrE6a_k.H!tmVlR/nSM_U<@tmJ&@/"jH(3@hUI<DY$YdKhtDF1V9p\Qol,dU:(Z2:=6B*iCN>^4d\<97\\.R9mhJArVc%>82lR#X.9J269'E/N\,T",LQ=q^Okkr)qPMC3HOn;$CW?_m-L"[Ug2HJQ46Gbgh-G<\q,+NI$7egK"@?VSo>9E2CRsOrV*hW2GK7%\#9A8mZKb8@T]fZrE1#'_0ao2;SJ-.AD?rY55f>$s&59TR:R-,Ijs:O)qjq).3FD/IJ]_%je[?L-#p71n@#ikcR]I5s%E0(mml6h%V0l&,YMA)75$_1iFfNTt>'0&l_,4pN`N=Ud3#`4\laN3QY.^A8[G/BDqOnc7S$psdCO31VI9+Fb`bMQ$r<uqF\CGNPZ_<?PqUoM8%/0jZon+F#S+mE#lX0\KX^":RB-guGdTDd%H:$-2gHi4p`Ep_gl5>oU7Q-NCrbDu>nfahrmrlXWros;E`DlXgB9^_S[+-?:.e]mRU%1S#li;pDe]f?\odRDi=UHKmIA5I)h(dWg1%h<S]lkjU(J*q&^-^X[8?'<!JNos50O/TsEuI'90qXss$E^RaiRgI'5to6^H&U#=V]%_nCNm$S%Sch)jHYB4!W6;N\Q@]mf)O.e9]jL>*TS^=R:G)k?V&5C&mLf&\@/]mf[tb[n"agYV7/\k]$1&0sm%rE__c%G1H6eEu_t%e(&B=h!2@hcIJ6TqUlNY^6*9aHi7blm/_4t548*M?QJ"]5/&%4n^-16[sQq`q5o+8=*'bdlY!t#Cq\SHZ[;Z;4aBrs^AGTmp:'nc%V^cQ>rX>-;5PP$-Y;[DE&SuftTDbm@45@lc_'TW'qtP=u9LlYDD_LkTXc9.tSDLJrYMU[.nJO1-DYO"0'O0d=oi!>pG.cF&@5$)6%rO/[tgYC&YjKT0_os8^\?N2/)hoi]^ql"jIJ$5KN]%:6Voi%MC]Gl:2Hi5kWF(KBqhtG%Yb,p-(qiS:e8fQAEg"kq+F3<0*p\J%V%1!'l,Z!pqolY!u[BdK[ajh6+Dj`0':ME.kc9)>)Mjj*VsD&-2jH`s&:ENS$]\'+2*mCduB*8tq*jBZu5T=na5X<d4YYFg5/XD3lA%]@YC.<^.7ICo_p]m$o3X_sHDi5Gp]hDYO"lB@;%*T5A`<#5@uI)i$:NS<!(2ZSrAWVhC?cUFYK#b1Um)fS.ir+,4j5fV?A-7dRi9%[>S*@/]HClj1W0Cd@eOin=>%$k#a#)rfK,#Kb^q7+UB\6O@u67D6hp+K*YJ1H2K=HV'coI>t*F]i^drdS^1ol4Q?`scYd5)Dt99D%]S^@]Ht`M#&Xt=U^2d"C"OCG8Se!q"Mh!0R]Sddehtc>1rUDT1*K9;a?ghVGEI%A+p$Y6bFK=<`_<:JeV,pG<Y$]A%NB05)I+<^a%qnn1eltY5K-jBMj+1Y5+[i,4Z):_&$?dmACH85$BrP$sD4n9RdHBX__3r1iC4BFV(:a1#C:]2;nW^uisj8<_:Sud3hDl"rpPJ%ig%:-)XK.T5FYWd+PGUe6E+CT;JtrA0r9cQfdX:WbWjKs06Ei#\lG1A+]SSVbrOBM(Csm#<JOKTFgaqsk:ij\='#+\D9WlUt1J7K0ib%W><f8B-$XP890ca0Dfs+:95V`eUJX#^e^Pua8E@.n[]>g)_2fjnhYS+4SCthNl7,iem#2A/q'AbM_cu*I)Ul*i_Z#>f0Vm(*rc:G%KSoARi^LdAlb<HJUB8_&0J,4>]fbD`iq)CTl>irHSWNEE=`nDXp!M4H>k#:SE@))qGg-.Ed]l4p+%gM>=LQ#0e*u_h1B$lbJ"8%[%T@]c)r9V(`34eG<hC]>^Gbe$A)(H3&`iCSgd\@o_jq$RkhIY)A^:9gDn&\Lp2qMueBJ_a06>,eSTOL]L#kLp]L8e;@07n$<&_[g/%6!o8\4IZc3o7qrH"tT$56QZemW*#Pti'2d%km@9U%,jG@WD.Sdn0!_Lp]+bVN.5>u:/=*4++]acp%=pU:7kKK1['$OgX.]4r`!2,%[4cRW[djLe*7hcKTY&@IW:n4)fpD8]d_(AU?2VbsXoipEFK'T5;P&S]A!`N=0>0k;b,^=&:2-/md'K*M'&qLW.TdV:A\Q<[58aO7%rU*ZnhhF[cp68%EFPK>Bp>lRI`K0GB\W)bA*Bo8:gf!q"Ge-hf_1,'b43oQ:%TB<.ZP\R*eH[Y<]as/49RongA@[cD=K'#t828#n%[h):;hU<iOj%.@VE]GJ'0FcF1+mK370`t8(I_\i"Y]T5NIN!MlRIR6]mQ)T*Fo<R$b;+Y3\jtc@jpR@j9rdeYjmhk>AMba<ljdPM%4GMCcA+J_;j:a]i5%jH4(Gl_SI-2i:IfiHk%j)YQl13pVM`juEZp%N,+L5gPWnF_X=/,a0q(u"MW9,+"^kr2LF/SN^l")n6T:TOE%OC,G22l6qtE.>%/MjGY$RXg8*O;4f@csrDEC.!$:`ZL"X3/Zk6%tD==dG%d%d!.#b;SGabRcCas?aGT-`.U@/+HcWR6(PoT;02n$%=dfe]I9^TJI#;R@m#;lkdp>a.--GiF+o,T9*!+=R.WL=9"21AF^7Q7*j+(J0'+:&rXb;ok^HnbMTT?&lej"V>WuoV5c'Q"t;=Shk%SEPTicm\'@#FR4>Nmk)ZUm):\ago8c;H3_^LkIMHdXtn[q>J#^XK%[K+Bk[S-(^H$goIj5fH-R%I^/?q034rr#P"0r5OgOOg[2+R%aNnHAXi#blS=\=i!%qTq;/O7,m9T#9,Dc%1h^srent7KP-SEXe4;4("of7J5/iDdN'Zcp'VuVc6mhiu@#GQTN<a@aS'2hVeAdJ$I%pmM4>Oog%K/r.el;<:qSGm4otY5][6@c<pk7\fn/B+<ta;<,P8534R0cB-2])WMY5p<h\H0F1`8*d3((7;5"li!nS)/:0JBfE9gS%#rL%f6cfcU5$[Cnbi=gB0A/TZnLht&d=^<]lrYB["=a<'"S]pteQnQ$S^LK!:lH-,##`9$Z_S2]"8.ldAA\r=hInD<K,PB8bh+g#%!GE<lIC2\#5jl2[/e]BHd1Ls,;i'qG,m!UcX,u7B9*4q5%='6S[7L7u,=:_g=sX7I18IA!c=dYbc/$d("8O2L4!I'mmXOe$@KjUR%ZY]6P)'>Z@3"(LEHg+Cai8NfO`sNEMD"rONE)!;+C;i_>KZC/Zi8scW+RB(b-5Z`g0AD(l:0!.TQNq).N$)I,Fr\NB9EefUQ*qgh%F/Qp;mbhCTd9GrsN1ZqtV<#/73E$AMRrbDYCRqI_``l'E%%oU8!ruhN%cVWBX+mU%==>VrZVbMa/GnAr3ZCP,^32Dd7iDBj\\Eu=%AL(:Qfo`7KK;C^2,5\ek-D'n+Zo*-8"%?F7c&i?b.UP%pg6TubKm/uShGV>%ZMo=6O/YHK>0CE=8T[4bB$YdP*V*>(B>3-]1^DU<%X5Pd;&EDk)iem1oT5C8YFF@74f_9sdR%:1_gY5?5%,bcqo%96N##;&EefqTDMd7SL!;nEm[E-VdTD$Uo_a>GrhB29m;t7/ce5qCs%k;s7lRHcBP,506FOSN/q;RMNSY9\AdSM`teN7-B=LD,fE1-&01C(fQ<-13>]EG1!UK9/<$%cRa5X`:)QJ]hKdcWh/EC?;DbR3q4K%#%T.m`hISINU$B=8bl@AW4p&-0)7psXM/(ikLGgpU);FnG[%n[jVLohMo?5>i\3fZ\WdT'[*rJ:'dMuO+Q*?8U/Eiq7H1-_$D0Nu%&$\W]&b&``JO-L`RVj\i&r9^DKURSQLB.%ZFqKk3]4FeGT5)n)D?:*8J?`m6'QT[WpsDN[4u%9ma^L8o^B]6)cX>ZZ)N]#/(O.P5%99)2uO>_$O(^lfJ=n/<^*r*nVnAUm`:coH"0e3`R+C`<_>[G;TW+!pj^u!$g#J3mS[gMh[;Sho7B?=E@iV;IipENY7RJY5'&[?b9%ah@o8V)2$3WNYC"=G>-deTjV&VHm3TV?N*3'\rKW*R9.hd8;IrnltFQJPur4r:M3./c3bX;&ZA>9QbYIqMM!V2*m1R?9&N0b_SG3%p*JL$Rn,+$1^M2IpC;7)3/GTN#IS'Y0+dTtjV1A;#>LX!]UK%:@nD7VARj+iilMa;55ItcO]*M5^1gD3ma0Ai.]/'^h(gD#q+S`R%I-XlP?^-gSG(;#'\o@ojKmgu%/^@4JF5EnGAWTNIOWb$?K.P=&KC&)8>bo9d*0n9$SP[\oL=SoW45#uh=J0aOPfItg_?s&_ci9W%%9+]'e2!u.>U&b4Oh(=Dqg!-Vuh&j8HXqOkfF$\7cj6i^&lh0[ms&nD1S`Qe/?FZ3e=Jh\%\.I]r?>%^R\a_*`nP;FaA<S'*grikQ%*M&kX`No<C6toI]]K9oj^Ska:_t;T-"PE8_>#k]s^_9<L:-F0okCb5\dt_"s?VsU4RB1bP=&4*;KXtV8)K(urc>'06R3+Sa7Qu_D%iK9tJ-J?Dg=Z[:g?=0Q[M0V]ET0>`&P@q$qR(Y[^plnRe,(m;Ll4RP`@C]9*"r)G86Mq6:pjM^d)t*sor8X!]+))agnQhk2-_<k`%Xhgrsh`ZPi0]e.MDdPZ$:,IMqT@^'MP-abLfW39!'q5(qmFC@M8o&dDg8iK#'k#_I?>XS^Pb%+ZfW39!Q%W_>@6mh-AQToh.[P@+%LsBiOE3_h][>U#bGtkE*]%X=E+TpW;gra)uF<L9Zk`P3^@LpW*O0mXfdUP-[qdiP_E.2^Lp.%TW-QEEgN`aNBCBgtW#*gt[j7TD$%W:bq/W_KkA_"giR(eO#5U0(g+6qQ$.<jMJS6Ycke!:`"^I"1oepsGUn78Cjhp:NsIPdr2+S*[3l`l*c-T,(:5r;,A_#VZ"X7jj!`%ZV=g]@Fl6>a[>oU?9Cd%.4HF58h]lDOmJmh6?8DC@EEgZcr$!,c'W;hX-Bo]6#5'uZ[Y)?WW;?%`8`'`+`\3%1Kk/qZ^e/g7Wr@$%UV&s]dbc8rB=3a,mr?89J:;niU0Sc&L_[i(K#b4e.g_Mebl@`6:r-%o.qdprqq37)\e#Lb;H(Dj5LF"ab96_Va.#67b5aTD"onp%%2PpL@(S==,\umCe+0ru/du3lt%gD=A+U1MHrfj$4ro@_:=fd*/%]LtCW4j(87HZ&dOESFnM<oW*lQ4IY#F@B:ILN[G70q+:;Z>L^%"G+5,/XIU$I]U>Fq0.-Z\mTs+@3A<V,,EnRmKi;XR06bg,m!;U5dLTEr+_X`/W"G<*/nGQ"MOXXLksNV."#Ks)%k0F-QDFIi&k.H%W2hU)YCjeB"!=3,$_L*]]Qti%;9MM=X'&!PqDSJ\!W_,ZVZVIq<SmcZ\J8p\,4+DW]4*7T2!cn)Z5J!(J3bZ%6/XgU2B@OoT"eQc%nW8]40(#@=aW,hU:K&2aOW"4m4lsC"s";`ZU==]V!5)cU$R2h]mad/`2^Ik31OsF()g&S.$9RI(bA5Rb#<K06=tLbD(C3[5CWm_.%"2#ML>Udeo$A`DV>"_ILP8?6jTJ:um6)gAS[3^<Y<mgq(/]"\!81fb7[+Z#WanXAoWu_CTb$qt1;3i%eKu`Nc;gOKcR:#:5/U_[P%Q,g>%SC07Y6tL%WbQsqjP`G,fN,k^baZR#&dQkG7BW$9?Gg+fup:GN-M/Q1(c#d\OZ?$SJ,9a@^7A`//Zfk-shr/WGEHPrWnP6&C%m:W_!q>u/Fc].eccp0kjBJeW.)#.jI6qJIc0dRlqph`PG?9,^JPW"mXZ(D^J`hP`n2qj=&'e._^lsN2M`StN=H1u(IklkpKb=1M'%M_QN>eF"I`47o3l3s5=2C!(&68kAiR)C!p,na'>a)bE>Xp69K)g)&5.\l%#iih:bM[<@UIl+sRiOhK?7OTf<hC^.S5i]$sq-:NN%%O>4]&f//=FbNF*5cW`!fp3-d>p/VMoJJXNm.V&5\06Cb;HQeujNCg``cS#j_DC)NXgBS-&h5>:>Lm'm`2BAucnqh=AC$mih@05WV%':_Z`;:>F&/j##@#;`d5=#F?qnC11Ld%!:>D)cV_b65u,;^FG>KSO'uN?R.Zcd[&THr2ujQ/8+OmnA.Te1Wq.CFJ"f:TN9/mnQmr%H-LP6B!6PV]0Gsn;"bkn7\ibY[lL6**b-t[56C3F)[a(rBfRjBLl3`0R)^7Nr4>ii&XW6i:=/cFa(1[Lo\n>&iqT!LOA(Lo3l:fH%[t^[IOHR&,58IF#jpD8"3'6CQW>4pWEV<@+VT,!Nj<]H_9p):Yjr>pfW']iBg$pNKiXV\q3-.AGg`q86Tc0Y0WR=j#pVlAu'Yd'G%R9)LK]("R)_&Z"N(a24:ngko50!@_Ge\.YHM8>9)9Ghr4bA.SjAF6/?pe'c^hEEE-%\E]mPRFu;/N8%k`a.t0K?NS7-hZ>*3COD:%+5,LpIp?jhe!mm]2u/5\J'^t7iMIL?c,AZ+!JMRrgFb^.m%smQlIb4sLh11VI)!#O:WBNi5OKeCoQ4)]\B):GDUS4\g7GhQclMBR%>/RB@>2]1+/q1;YG6\%nqR:6srs:<O)gQ[Kj.b>iT7Mo`3X+pMJNkdGQX>"0D`?jnEkf7amOeQ\k@//p%,!W#B$gYg-]7>Sk#m:n%$L%LH(M.8dKElTu&-US?e2@r6#t>WakR#L1[%!iTBKXQH\.o7`MS/ee$IAJq__;-SA"j#.:uO^1@H-c!*YnJRNBcL!I%93SR2BKa%<_tlo0iXC8i>$)2r=N`ZT!89%i8#s'7k$JoX&#B'4JOnP4l`7<9dNU`-oO[FiWr^Mb),m"'kK?ZNa'm;Occ5$-_M7a'4h<<K4djZ%H:A:hI0L.;@bj^%*p)'7MgNI#%-e]4P[YLI*/=_g-%I?U$lTBR:Y7)9EkKnZUJNUWg<GE[!)2E;J<7Q=Vu^ui&P$A^WM!qENLhER%SZ\*,Mh8d_R&_jIRIV@39lR1iWQt)<]7<F?j%"3]AV#0S*tcm;k)r5UM5\H_3JM0$7TO%g%%WB`!lZ+Nd535L]g,A<7Y&c_>Z=DD%(oK,[!6[^TnUO^uLMT;9M@@g%_\O)V0btpi!sh;;>"g4"#nn&a\:@d0J<7Pa,"rg]0Nl3/#r!KP#@1_/,;I?FlB<^sN5<:uRP6+(%PMg`9MFEb?-/]Jq\5S>V@CcWtMG=H@#p3^l+Q<O8oF0@Xca",$K7Udg6F9-mi#rSg(pHOtAtjN:_!Mus/i#[%AdjZRPm>B!'+*S2%e5IJ#+Ti92%Ss%%-j&G'<X=u3WQtitM?[GiO@Y2&+XV`$^h'Tt3Y<19o?RapN1Uc'.tND@X8o&)Be8J`'7:e>cglla![4lMEsGJP%,rm/ZW"U_(N!IQ8(!"`I!;#afj"h6@;>h7Z":@*nW=o"EP%ut,L']j"+q\s*>6/pM;4,8:BJeTTH,_RpS02%O#orpUM`O]JHlVYV%%#X0Y<!j'SIA\*_ndH(dXP>NO3*,d4Jf]Kg_*m>CLlL=cOTIFM"Z0L!K5n1>G3Gd<K7nl_64+1s:V_$CF'':+QtW'm+'#RL78e]H%J>h6<"l49KJaUhDGu(XaNJ3WaqK%=^JX5E%g>V'3;,3(koAg3.4e[N3Gp:6/D$P-N-nmc7`J]Ne@$20?'$ur>3W'nZQJ`FU"SiPs%$!?kVZBW.0K/T&12cc!4n)F]i5G:L/B*\#Ua((qIY[DWn.nPR(0_Z:M?6*AX7ZNiO=HZZqJrH.-,sq//J]2(hJK;OJ9McF#aY6u(%"[p3U7W<-NZ(TqW<Y>`\5#n5K-OGn]P)7kOa?@Ki7/VuVJORqL3:JI]!<kmu][R9FUbon3a1GE"O(K'q)3T6):4OAib;7$/&'Q2b%2#mkd#)Y2hWF9U7)q_A$#qhpXY36`O=):QE1_@OE@%h:7X]JSD<`)@PMA'AHYU'CPJU=+p<.MiDZ4LD,M4W+h,Qp66.#,bM`&^i<%Xp\e"'-d?PeR3oN^fA&8R>dF'"URU;RpM\ABcCK%$nOu/],9^B6dEYbJJe+a2UU_+cQI+[G+e/WGrL6u35>f>1okp?#RO$C_pc,N%/Ahfm%k3VbiW8lfGQFCd5JZ2)!X846@&bIhCgn(I$dD8-!o>(%!rO1i+AQ@VJ55#?*^aF?T#6c3-9)E-5mdJ-,0c)oK#)pm/B^WV%cNnMGruB?7NX^sq<qFNpbUSo(0Uj'Qf+;Xu7`:Gm/1r-a!K>1?'1<;68En"oRMO70OXku^"F;>N]\m+MeA1Qb4ThdT!/AL0%8;Vh%=FO;icT!IJ,+9AR;^3n%S>mAE(`:o=3*(Y_MgK%=hiMH7Tn,6q4juq&NptP>`#=63;V6SP:W!:TYl]0?U-OBg-'O(T_1*@Z#7oaB%%Dj#Gb@'6jpj&pm80:*bo#MmRZOr8i]HfpJI$J>4<3`kuAdCJ4KK",kfaD>Z"GD\")N5t#3<:V'@=j"`ZR#@fp+^$H#VV""^bFD-%Z5b7%2259Wg5PM>,9dL"#+.kX>ZHIo58.bj>"e@]-Og`ZUaLu_3SZbP+iL4;`$n1IN1^0oP/,SbH;$aWS'm$ad4Er.d[36-i!Ie.%oF]+JQPLm;83CSYOigeq6q#lLTdB4H"f1901@Ge<d+EUVH&BN+#OY!M,sE*g1Qa/+QA!e$*9'BiNVG]WIc8S(j+;[roI5J6O:cXR%=<<k7!IZ-L01gp%6ou0*+H;n29JRJLNLX?*Tn7$HJB,!JHkI%g(8/_tL;lbAn?>VW`2.^=?qim.0TCSonH>R*HH@CM"os:*YJP%A%^aE5%V!K?k)G.^Mo*7eU`!R.NOf9V#!(9_&+P,IY&Z;-hd>82;^)'4`VueXoG07'7Z&0)i4S[iD61ZIKTG0:pn0.''"(+o->G<M]%>[Wj`mZ-@rJ<PM*)(5OLJOjT,-R(bgSqnSUO92'XQ3@K'2gb[BkQHNC4bt\pkK2[hd[6TA9S"J<>$/dnr<q!^^82GjbQP5k)%[;+%>F5I)e]"dlW-s8G,_Q3/E%%5G;i--9(.'S5TlO68#iDsF@4Dt]@GcWI_&K6?GKA<pj,pZ!`%DITi+V1I_#k\HEQG[\*\M3G&ZDWA%@)ZNN']:BQVo6)uO@"PRoJI:PrY0)n,25Y^\Ke0`>nn5fWj&*)/d<LMfQn/3F)dof&?2od"G_Ltm(5S96:3GN39EZ,1P%+tHH(I;%&'p?eWjG(N-Oc2\JcS(=q3/loKhr</#!t9`U`srtnIf[EiK1Cf+r(04i)+lQ]gFOm/2/u;>S05VZO3XnJD;R\IDmlQ!Pr\>K18$P%;CMTM@,a9TPDMCe(BgBD5R.fmN0@$,3,V'f.No4h6_n:T,ppN-k?`a7pmIuk?W(kmn6_k'Tc^WTE8F)1iQMR':`Sd+YeMB;!b?P=%80Ak85\aP90$HU0K>^,VM,Y^A/J/di8<:_-7SVpQ%/UkU+W$"W:eVCaa-dt?"@KtW'SV3.<),gn[=f-CiY!65iZjrrms47S#WSi;%-WHT_!IPl$03p)jbQ/V=RQCXEeu(:LT]?2Mk$Z>N&f![P`+:NO<.Wct(&ANBne/R-i#K*<k"<Q=!n#ZY!RnQb@&AboK\[j%ff8Oe%"KW6@qE[p:FFs-#q.kYO&m1tT/P0B2@jJ2iOhk%"J3^n9%8rkA+<c8lUJqP6`JDSA&Q)UAR3]maEIN`[1r?1&$k8<N#0#XPRLgu\%)GM*%I,?p'`hE$56WJ%a0dB'6PDTn_KaDEZ;;OX4Yh.0NF+f;LSc^\r5Z5^q`_"=(n0RkF`8"3\or*J%9i50X?5T,%bblS+(7PV@%!.!Q[_2(A(&=WqN5`Lk?`/Y03bG7%4S0bKkcj=.n(`oYePV5?q+15RS^5.^nfJqV6''h#F,h@SKP/I[bUM84fGQLXE1`11EE@^ea%=XrdEU-9Gdoe4Eg'&mmk0b`^qRg_JC:\$#,5-*>1;jcAE!/h)6eLRp-n,tg#_ut-<nP=uQ_LmLa+U(%Vc2ielZ"&GL7[2L)E>CNg%9W\GS6(13aho5+Y(aEX$+:X;c0n^*G>%f[pI%7!'(m-#V2,5/KYd"F_NKI*t84(\qE,h'!M=\*uQ5!BYn;Kmf0JeLZ)Y4PMI:BLu%OO;_N:!bF7/!(s8T<QDc66cUf5ku:f-UWn-%W%6:iU7DRj<H,G_bM7n^i1'G7qCP7:BRoH@Fn_<Znc'')AsMKd6*9E)&siqB/GVe%OmPY!%ZkTMB4^$p/rlK*9M@WFXE+Fo0nXRA*$RCRFn#m%<X^Z#[au^J@aHT";PH,R"j\3u&s1mWD[%T1=$&j^8g/B@<8Rtm$Ch+a%NlH8DSd/_4@u37+-PAQUOAc>F$QBBVp]X3E/Ye,2=U)M&N/2<l%m8t!\^5k7?ANem$PXL'$JB+P"/5WOl8pa'."'#P4CDUiK]ZsR%KHUX$?X)EnUW\\!o`Y4'CXNh(:<WCT&=*e=;FrQm%=<c:(0_6rWc$>BC;elemh2&a=4OB%IV5Mu[_m+\,2C,=CXhN`)&80X=C(FW%_[n9Z(Au?Ca*N:PN$08`W4dQi6F3]>KO4eF8`(B?4-a:EIdh^r[cqGeOeoDb[LVhMQ4I-PE-t8&a>aF@^2q.E*`O(Z4'2ifnD^u?%YU9enG&5fPSl5CYJ3(Ue*I;RCfQk7>JDIDGL=LEAe4fOiqD7q0WojpW;m`Q$=/CO7#C%r>C5R=[9YMC%)<Vkq_T)+?3s;?a8)[r]%h(W&ZkDPDS`VBRBjC1*sGKfXF1T//U\4W)Od*l+Z?hJ+?9p9utOB)`BjnT6A['=_c;+h%'@7ad\Rp+'&;0FiAc3Z77;UIVmkaVih%hcXQKC-^)'Yt_);%0msM?gabLkt9(02<12m/>^VZ205!m^0C$T\`ALA\s4^NZ/IIVjB2hS-D+F[/Zd0@"\uL0a;DDt*(Q\5*F1lf%TgB1NA8e`HkSZFg@n^@+iN8M/-/4QnDFHeeQB*-f1F,r19Qmer3D"L#gY]mi^nA/Q5B+!Z+X\g`d_aYYe9Oni$NBE&hQ/4$*+j=o%3cs=[U@EQu'*NLjEqmk5&7iIs)?'1p]lU@*WmX%Fn!uf7-pITT!Z(2U`=44X6's+en;/<*7QH@$$h/1FY)>+Z`^YDc]It<(SYN""%H*`p4YTY_&LGY5a3&][r8*k)8KU<m-iS+9bn[MVn/fiZN'apjc?a0(`<-V+&Zja#_X97ZGTD:b?S=Z:22G%Jek$@"j.-`3CMBa+W%dePZ@T3i:i8la0GeWU&84JW[d)=l<C>,H0JP^RWWZ![`m<d<khP$WE9nnaRmFKV>\<]NXb2hlM7530>EADU24#==dd6qs1BfID]l%o)8-qE/kK#JYpA!3"Oii0kRE?>/@O_bq<"/0_VGQ;Fso\nghO+gknK?=g&,r>Gp6j/Y1^sgu;#aMR(`l.)fn#Z/L109JLj5oH-LS%N]\4=7IN9-kMfr6B5RP>H."C3s7Hp"gV<Qnhu<M&"2<]`EG*?Le[E+8n"aYlJ0nt:$\(j<C7RjNj><YT34mN7rnqj1VC-(j.os).%FKRpZ1K](Fkr2>I:%949I9Wl=,;8Ok4fa+!a5K6YB'cX!AB]*Pj1-Ws6Y@SEmFZ?Ja5*Vj(PJ2i\8MO@ospgtfPo0dL[hBNloS%"%HdYZU;,5RKPei.]\r`Wka!fL5c=s8udd/`1pZ[o3>\uUoS2R8^38QG*Unm%:4BU's=iF)>4Rl[.*i'Ai$*`)t_<K.Z1e9%=-k:;r%l8`RmIkf,2jZ2?...I+5S_2NN&8^[\]@u\@0;[hGPT<Dkm4FsYg%<t8@e])KaF.dl%5+5>iR)#nH,or,:Pt"2,djVUM8]:"9sBgE%LXDN)/G=pg=="F'VnU62Wn8=?8,^p2?Nu9N,;;"MTo:GnB'c@hYX61T_W\t2h.]Za-*Sr!LMcn4MWF:<l4unR/e:%E,AUnl7E(3f%D.fiM8YK;.J\j]1X4Z&X=K^)/VfkldqV8l;VF@`7EUXrl`keF100]&KF?cr(Aq4"bLJFaD/\,%PZL3X$L:>-igMNQ'OY*:VV?`1W%g1o5JqT1JF(W1Gp5reNNRkf>[jjM\>cJ>/@1g!W\odn'7rJ.M3edQVN,AZH*?QN8HC"Sp+3G5#\aj,DU!\Q27k^ufG"?i5mj9kQ>%4B]Z@VS.$8\T?%I/,5Ea%[-)*p,%51fD*p3F;CL6%]?0nkeQ"/6-g4?3?4$%F9ICX'Ug\\0D0-kT/&7oFcg@,eHgcddBa&u03eoh%(-4,TaMNMoB.K2\R6dm5H-r'33(>q$/;6)9RU[!*]4ZD+dN!)CZQ<;5gYhH,<^#,lJ0aIgGSaa.MiEYa08*%=AHI1l6r@b5iu:F#%LR,V4-N&>pBC2!q-6:!:bNn&1.%M%;S@:scA0"rGaJZ/=49nH8n6&j_?-aN1c11P'Mt=LP-\_!I+6Ek4US,dphY"F?_n0Ikh"gTF%2Z]bNNh9fK'0.4pBI9XOkNVM&f4q#@hk3UY%q%>clY!?C_HEof(-P9VI@\:r.)<08!,(2RJ:;&&pF(Wf86nEL+7O%ZYoqF5\2uBW%;c4*Z"5'MSoq'd_I?[#fq&YWHGnGu0:=<HI@J6I@E$ZPOIfX@PYJ]f$U('BtMScDj>;OTs!fpT$VB)M=&^V>p'BWM*nNLBikV`Hp%i,n&dIVhp"17DU.F7pBV[af7fb0f''95D)P)CV,TaQ]V=5*eDo<2uT%<,pc/s3q(q`1bFVea[Nb9dr&d8'heM#-B94Y\:PQfs*e4%N^n4E(<BMIB#slm!4$Ca0G$8TWP^@n.Gi^BL*/A-D<M%q8U,iq,eRNXjWXVaWT.JgBjV",TMoIT,!>IEUIlBO/"H6k]\Sn^l&dTl%]rZ+.[X66]$i?Ns`Fa^$K`?<r[=KJ/plNjr3ERG5;h/K0BFlu8+`a$BUOAOWmnI5`SYTu`$)/-roi*3*8=#da05/Vb0\'UG@M?Yg%Ks5"CgWpom^@U$"53"X@.i3Z"4tX/]%C&3FYKJciAZQD#^_EL5"ODIY5A;KT/BWW#afZ_,Tq$PHFp!hbT3j_X(=MLWTP(DjG`#Dl%>7#Et-S(m<UiCHa!+Rp:Bf(6ocA+@4?3]Y;H"KJ!&-HTIL;jPTC^7l_;%4X)hO\"56EK1*rnP,p=6[&LG(3H/9G!Vd)$@!Ua4$3l%N\==gll,sUJe8aU(ZmQ65SVT9RXXlW&QsbQk/GBE5%eS%&SMH7Y!IUEZXQ4N*?*I>!C4%$.jU^4KSV4B;XgX0*mJrt@=jt:!s3h6%6=gO@qF4`:>YVT3%'sZ#dtkN&[dC!L4aS5?Cpa<=/m&:rCk_(1PE'm+=ek-t@2q2ObO]$Yk+WG[LM,St(Q!lP@q8_%\!1Ae/caA/%gF[qa5pKW41tqs(m+`6._uOGtRa`;1GuKcE-,/2Q"44!V^3q`iRhKa;:`a#UdL+?(0%eW\KL%"A>:QBt_MDc@B+-COSEE;6;,IFT%c5pBLH.:b@@gQ(TejRpKE")XU18Z?.(<73I[/(Ee.qXg7TM/>^euA:/XqfTkUd5;t`s7=mGn\$uT10WSN0&?Q^XP,p:T?[#/8ljp%1f@`'&GLr3`/\LY+,+48qne43Rc)PJ6;c'sl9TtOLAcXL6dIJH:2[l]$9f0fc%u-NiWq0S\UuerfkAa3H#>MC&pmp>LjsdngT)5[%":`jX4>GgeGW2Y"lb+U+MamljSkpK"U(nXQGk[S#9K:g>%L'`>(Q!\qDF\P@4pl^j;F"t/"+ACp!;">E3-$MD7+t>`ZiQC-LL$Dp%nSoD,<=Sj=+Yag/Ve6]#+X42eH<H""Fg<!q72Co1#aVL$g>1"3EB'&PGtc]NeYNBf1XLbrP>O/-#nkMO/$03Jb(\!0&9ac:-JUgH%,K'k`Uhm-QC1Ko_Z:QoEk7$-n[&p;tiB9c,%I/1O7\DIP>ac7'I:^lkL$)hn4'Rd`0mT'JU)6!$;UUpe93oRn4a'')GW(Rik1`jV%dX_nTG!^0:d&=#QH@GXe[nc0rN7+#lFpnn>`f<TF=O"3AQ"5PB$<#VI*H+Eb6E_-][e-hs?Zbc0$td.2l%#T+pT>q=1l[rPV2BS2%I5C)(j=;WK"+oc,HpG/m,esXAg'S,oN?]eOZ03h#F7@?O?lZ^kOhdVX-lT5AddRotoUlaB_!V1iU@6J1a_l#_Z`0"S_$j[j+FT-\%D(tsJj'kSsJ3p/8<<Ahtf^]Y=+EblBMWeq(WnAa<I>0tB.qiL-[u=@A:gi@@ZO*QHgZ2i3Np730KKH+j!ibl?kT"((>V6STCmD(>%[[G+$QARUP_!ZMMm^l`!_,qO/[1:bZRAl"jG?r%th5.+#S[)IriXTc;FuCkK%R]`9W$[I7RcR*3b0hHtmi_js;<mM$"`\KK$__]h%#XBVB#E%J;R'S/#=oB^%#Nk#<df(c6a$2Q&eA/45":B.t>T@_?Yta_8!U]jao-/YiL!sI62Z3'56G$3!Q80oMre2@IL,<$OC'5GQ%ptu=.:/oSPhm+(h8">DALb5S'A2[G-^([+h8^DNF:%7kp!$s%iW`NbnN@fer0]Y+*f5m@gRCnj`>-aX%$M9l1<U;HY!K_l!]#@75%e$!LcEY!"2IXus./b=^*,Z&.YPL\@`GMKJhnX'rWKcDN8gcu.'SNM3npOLR].rg\$D)'C"5j*;jp,>Y:N*=c2UB$Vl(GhF[CnDu5%(X+:n+:+0O?I\R!Q`pZfF<=l80F(cq;$%;f3,<MW$bKA2FIhSFXiR5B!+0F4iZLVu@i7WAJ`$ip=AsU5##%"iME)k72##E<0BITb%AuX,\-pnc5893m0E@4WsbD+SZgY4ta2R-._^':0\hnN:WcV6).WJ0_8:SX#AD%u[<]SD7P%R6LY7<"Tc?T`\+N#^a%01Ue"`n5#R%(1`R[ZVS4`37rLWSp)4p_+C;r"E!S/"B>X8eXr^[2CT+$9rLYj7>-l#:r!Vk8N\4!j6%5lqf"4jA4_LDS?t'Y7gND&3P@ntIqWTB%Xf6m\AjgP(Jn\IF:dkr.U;qr6&?)%eb("SJP?MO@qCMj6%uu<&CaSQYUtl&68U66CT1Mteif"+o\GRMsV36lTOHNOU8+$tf4%.dg%gF>i1%S?Vp_?&@Nj>]/E'(.P"\>/MU*gt*^_*/h@H0aijV@60(0osMK3+Ln'R)N8X)hA,DEcf\WE7[/^Sr?(`:4D=g`%%.T+:p1p%DCutX[4)"]P42hD%RrH5k=hU`=jUH"G4>5ZVYIDBJAg:F[)*NlP;\]i[4o'pQIXAp6/6$%T\US_'<KX*JP0lD43'q4F7%EPQn"J7%U7g\%;e>HgBU,J+P^A)Boo6P[OCr47Mq^*`.T@%1"#4jYg6Zi:M&"?>m=6d9qdR'2<WHFZjhsnoBj;B-LTO+_=mk*5A9aGYpJ,oC%BIWl*8C,;2G$^'0/1M_A.So2L<COKKpf0nfLr^h@P`/\NO9F/Uo$V0i'`hqo,O),011>tNLVo:;*si&Y.5S=3[,S6cV)!]+4%`?4%2e>Z*PE\X"(N:@;#*;hL`&\%))U0uZLHn]l3'^XQW`Orb33.#oIK+o$Y:M'DQk:kl>i+:LDT-F&2rMg#!)0[n5ae_[\mGL1pn;mT%A3cr!_sp]]@'ZG!,+e*s:lK7UZq>$,SP07,(mIHtA$$-'^5^u27XXrO<'8N'cJ9FR=Z['="e)$aZuqcW56OE!hf1Pr.bSsab"!!W%BDJ7&\NM=U,1P`G#>m(`'Fq,*WI@SLji,"kqi1Qq\('O0U*bK+eOO.:bSFtaD@W<Q0j1;cOi&+BCr2l"9[(&9d;@O7TFgIM@5o=M%m!>hVZ8B>&b+P[5.r<T=cQjf:#OL.WfCk`oA)<N>e!1k+kI)c=iPu/#f4(`bBfhlh0!YI]`Rr7`.&=F>(GBGNFWoZ\e)bZ$PcC5p%3.YSKmTr':KEYE]44Njf5VcBDG2YGKYu8;cZ-&\#?jj]c7#if4qO,>pInNtd,1[/S.pqf5aOc74f2rWp[eO-j-o,<sM+QDtl1Rr(%.h,.*!V:=fF"%Z,/1ZI=MVo&IEfX[h;iW"rY5f>%X5fUaQ^afQ+#c$^q!,o94rD\?&/`a0;rsQ,L=/=+G#6^@q2SkZoQ`,*?6S1!%NG_qMZo@heg`^D;J95ZNCVZl63$F3!H-fc.3`qcfl;*stG2+]JiZF2HmuC%lU!(!c4*i)G(bQm$BLS(aQ7V`9lpeCo&-JLMb)qdM%>tc_.);UJ:/AYuN&u:-dE,T**n&+.+k"dR$ou'O50+s-FE%tE=]Igo'D&QHJ&4_akV]jft/qKWta<`Y8"G*L(oG*]K5KC,7:aADf%g*_S=eLg$]JhT`F!sM<UG%QRP)baR'Z&]cd-GbDKVG[#7QD4Fk;lYA+bWc(2TD_(LUcO08U!!QQAJPltKn22DHYe\.93TY!V(58d%K>hJ_[_e6Lq4:$ZfSWZ-+'Jb=$+&ct8NUR_#0;FbIEGjj1KCPk8b.s+(jYs`'$Q:fFH''&Yaj#_8uGhn8uhEO&jA"ebKgbd7;NpY%Q))bO"pVOPcRI%qPmg\E3+\3p.Kg;-2d*<#f-P$D@?.%LOTOEq<m0:IXdFBeUMI>VF;qkrTJ0L[&@egU=+j50="H.,l;HaYkHm.L%+DT>njjU-rT,7>;&H_!:W.rFpm.t"LTN"lTK*fI\8Rn&K;k9T\YSFF>J-<bP_n1s(;6hWlZ3Al)Ll8cRJ?o8BX$rj.KU'4^LoX*/%r@[0[1:ijon"3s/p$I;aUR?sGBGnGjH:V*@d(I8KJ-q,n"PB7+1"a0M$8`r'BV2#KKI?a1jG0`"=#gZNolc=H#7*%dRjCO!NtKe:%/k4,=Pku')N0\qXl\B.&+WsDa^pH9.d4l;mX;]!<BW8*aZClAiQ?c5?`rJ"2M?=*<H/6UWAj2#aV7HMZ"Y/7M-k+`_6+TO1.0j.1%abW\[q!]\i%iN3Zohqu^6.8pQAn9^gVq9nAU6Y"%3o2lGTW+m;>Y95=Bcmr8U6bL7Tg=Z@hb3r#J\..EcIe'U9MIAFkZ@/'3DJ'@%=K6@+A;s'j<"nFV]0$3%<lX@L07%pt9t4V6,QT8\>2EWG_h:L"9c`10F]u_?2Tfd[Wpe2>+rlF7C;UV[RC?ScFOLR6<KttPloh,A%#aPW=AenR.2+GZ^TFb3.$LoM$`MCa`]-R-jcS*<1E=!:M4GZ?H!"6OTcXXV6=3dV'3_/AS6r?lOqt\4;2^comRR8N>)`8Fj?/&$&%-($T*(gi[t_=qEc,]IG@k\Dp_6t=#o=T[XKd8Xrig\X=b*-nG'd9A8GdbIt/$&H4jq*k<IE!==P>a1N#EPB+*%0c>-hs5lF+R<K9%f;4!NT;b_*W`Fa+l&Z"jFdCIOH\;\>KJ`kt$<S<-\&%Z8o0I*_XoPhdU[l$[?<0q[hZh$uk8.F;-NOMfL>UH8f$k1%3IFs.%:qF3%JaGrc*%].9/BTd#QeHEONWE?_PV))_e&IY@2)VV"aFH0GrW8do]K2S^<Cqbcq,LT8:4GO>gPV4R_KV8+86^a(^`>^NTU4=u$r]m]%i[7T&GQ]l+bjT@Lfec$QZWWiA^s!._"E'PHJVgBJN(@!BWh:f=J".ql/5_0"W9,o>SN&U%9%.jV1/PjC*@/@]UHfTG6H90E:Yj1"%)a*_BfS5SiI3>PT\Mb#;5JNT=O3<l-HL[?uf"41`8eQ^+\HJ:7J2E09;5ar;U(g#t8.07l1#l9(N4s3nRN&):MX4IUEOY'6,(q&f%$PX+^0pcGsi5b7KZ"_+@kp#0,i&"KH)Yc\XAL&5r&V6GdVMklN1jLXHp5>sMTUk@K%=%H1St3`^eBtHEqQs1Y"J2a[U2e_F-J6u_%C']l,_sT-P1P!n-bJp/V_Itn4_kbde9r8%?ED_+B$S1FjchBOj_l)O?b#R@`oB6KA.TXncO7JUPL,$oi%VA:8'Hq:S5blO%'E!ga%;=KGaB[Mk&cq3P#:G>q@*0+TtpV;Kg?0Umnb)keb(PEgn?-I^92<s@dc^!b79q&K[Cm<WUU#Vs^O2Y[i7_dO5Vt%Llik0-u2u9,2%S99MT+KbKVgC5bkn?[dh=>ZBHTW+Rdd;4)c(G(4ag1L:3N*DR(=N)uS>T?nl4OFdWIh&9YM._@U/_Ea!S*PgL;&9=OVeb'%0VeP[%]$&<_C*_4&p%H@DT<)uU.AoM$%;[b27uf&]K&CH=li8W_A(XESlsV_2/&?`^6/bm.['I("fri7@K_e)ra2&bmMSbD,1^8[g_If>;%a6l*q@p)7Bn0r7*W,Is>&2$ROQqIG%!a(!gY5m*#dj>MDQ3nl#M2]B?jF'iT'n2g:@d&/E:^SK+0W[$m*'/=)UV!1<eZgf/lY8dm%k_BL:P/2=HJD`oM"X$$hmKS^uk9f/SI?fHNH0DU*)lH5u)bF6G*Du`L36t.u0[#XoI+J:#DT07mK"boZ@,,H!&5:Wg^h4+_qLgmC%7IM82GE*5/0pPKC]X=b6?5MLJcM,=q<s/j*4MHjVZDlnl52hqHJ@KI`Tr,.!n?l<ihB)\QQA*"2F-PM7ae,$XFfU8FCq5.O4k?s,%-a)_QjiLW/p+VC(U2im?he7/"#*fE6h172*mJCrfDf&5V(1iG*\r"%b-1$J\,Y]%%)+<A*Q3cT"Z5(%sfr>E.(%Lr="D,u$Un",S%LF%S_=gF8]<r#Efj.tK+/tcE+gS!_WmcP<QL>rsXHEOL=>$aD78IO>0<n&5[A-1MTL.1:K?ss\.1b6MiL"BHK3P1s-.'@W\.IK%_%F2U>AC9:N*5?U?RrA*AkFX9"VY0F&!0)8((UH8DGM\1@C4>S+coF-pm<CfgT19/LI#jPH*$cX+`LWIp[(L.fBBmc3JHb8&iOZD>6%%d5"7oAs+bMV29GKWCL?.rmr'-+AAI]FV;*[3k*Df/Q';<er4:%^"F*(sZCj<;D!/2+)2Dr[i6!Zg1=h[fhes9<@V;/`p.;$2D?u%`P?1T.GIh0fi[n*q\MAC_?,K:8t;ZVWgkJ!8WVhL3Mi@J5f.j'UKWO0:<j>M(G8&B9&EeS:/:q.N2GPekjWspN%<'*<HSts'kI#e%B+J+;(AnC#mH59+I:<c.2E+di:rl,cTX_.Kf,M/1S0'6Yn7H3gYLI`7VCb<p(!^8C)'@_:1sL"QS-KB;1Fgle&<0$l*p`:]_SpZ'%;d>Qb(PagiK1%;O,/pAQ<C='ian$`(2AVC,(5N5I&XgfV<dt:L<\'D2fY2-h&VL9u&$:>1_5oS^r+/m\i<>c>>#*T]TE<NMZ(QO9%?uIYuN5!ZJN?6!9"bjZuITT+B(6J9FM?"8F?k$ee%9Qb"[cEohhq>,7o(9e'0o4Ga^-*8(MS7c`aELBfB<<InZZ6$I.5t^^U`'hB%Lm"Ftp7*I0V#R`]<RIM'@ZfT!<Op4I?[^plZ6K1M$+O6sq-FI!Gnku;e7`("h'mZWZh[thrqcQ(kGPn1*\\\b:t,e2Y%j.u+UfLV%')2-@nLe4Y=Ag'`fc/6u\6W\I/">$$"bp^_&c>PgJO<f.V_FL@m:'[O_7qheW%b$qJj$Q?KCK"rBet_\"e*$S`M#!\,p4(PN[0rP%N5DVo'ba^!:S90e,\.LJ-_U06.K6!6LkAm]&26pDVg"'RN('?m5%I[@KOL-<9G6A$GS+D+7^Y![!=%';C.7i[G77jnUXd3>-;Wr[%;m<Jh@SS`'9h)3Eip(ha%2.^u(UO$E!Q3%gr!ZNs@>2V-7n/c`9C,.C"e)ZZOF:>%0mEg=@b-]ICsd'u+tdY,m!qZEQ"EVH,H4?B%R5UqS6#;'=(&O_K@-Uq(oc@,[915FLB>%SXS\'3iY*idc?\\E9@HJD#PM9Eo"`r!BW%7?]TP1EW4e:@\Hk>TkU"N?C2"=L57E67Y%1Q7-9qIBWfJ//0L6][iZ^dL`Hbs[gpBHr5YkY2e-!1_fs?8KJPQj;YD]XoV1$W^3@7L?=Dbho>'IK4D.mil?E8b1.Z\aoYp'Ym6c%Sq)dXAFT0]Ze(%\<MsA%%)93i,-^Fb8;TcCcR^MJd*o^CJdhiHU@Wt.r%69(F/sE,'pUG<qJ^?`/Pogf=)K)&EjoC;pCZ*bTTs9J%nPBX->Ee6APm>h?g(T8N9R0qMdLiCd@L<<AD+?0_A:TplGt-)!<MKKffiPi8;MEi)SbF`j8pB7.$]<=P+,,b5)s`*mYeH`<?Q]U(%;l,CY[M?VVY4u+hqa6a..gVG)!iSULc;7[4n_)O^I=u>M`NqPAl8hf3XC$I01!3Z,$q<6l5_i=f(VVKmD5c<1O#.Y<;Rd!0fuYTa%UACphd,DD*Hl3)O8g(HbULLH`4mj&hQeC2'RQuF&Bu:#eBEGGP'iQY]g"sF[X;Q$0Zajtt@>3ZD<=je5DC&jC77%3(A3J%b!j5qT%TZOXqnHTD,$lAg5eJt5BMSBi:!Cad\U*OK\;Y&L!J:nWRX+;K4^7aJ35L;)diV.Bn9GCfVJWb+K.YG4,7)G:."G#NeGQlU/X5+&G%^0I^g6S8[q16`_JK*i=$<\&6h)%d@9?qXe=H>1q&;UtFEGb=5W^&#a19uJ3uTI8hD.Z#%QUXf%?VT`eKV^)P38qC9D-\3hsF3H+*%NiOX,ECNshX\2<eP))EaXLuZeV>>dB&PaZ92KtaodHboU%S"8QO*@WOI712@>:SGQ'n\AKW]8<kD/M49rE!!idB?DIlXlg`OKRPN%&s"O,W:p.oQ;r'>,!`5!/1JS*r.$rX24*KL<P>j$<Pp\N<Qk,cGuFX8msUTm8>rD4?VhqhX,7IR0X\K*Ei6.;?WG?ak3W#G`*CQ0%<F=tkA"aBs$Au5!B?<tY*ZYddFB$i]D+AEmVs4C[<_6"e&]I9/'<I4gb'MF[POC_FftNlSk<H#1?<91_I%*P9#@?]T<k=]s$gnMI%fjb(W&CBVEa7'h*-a5p>V4U;40!VT;Y8A=T+.#KWQ2>g*:f<m'=)mj]8$nnXP`erL(<cIdS@k0!Y#a=BW0)9=]WV_qiBjB;S$h1k%b=!p.X6uXb*b:QVs4)tFX:/44j@2ACSN>Kf7nT`hZW@DdZUkk^1KH$^4N%;G8ZB6QS=Lu(j0"KH?4kf*gAs:pXnppi`.NnJ7AT'I%/R>KcCQ$r]oQJ0\k_Zir!03)?eZmP%fhhp0ktQm-JXRCZ3cuk_7Gi6FYrk5GJRu2?7P(?<=.86.n)oE<r-ie9?%%e.(u`=T@`;09%)C&9%I0S_?BB#mB0r$Wf,S7:K83P\r[^Nm/>?oK&TjXEOfkf_+O.gn7"Dj*dd9,I"7/2FZ/#D@Uc-Meb4Bu!OdK_Ur_"EV43O4m"%jHC.^=ROq%^a(r`Bg-I%M"X]dRiZ`d;tj.e'Q,ds(Xd/+q8j<t4I'KkA6+**5ttM)gMi&9@(#+Nlk42?YlN8kq,'/.H^D7kOZ\.-%U=UH3lkVn9cK&2a:F3(@qT/4tX)JG*?UTYhCt>olo_r3G]8,Yt,o=0m!2.l@:;mk\6.I14>>^nr/%noK_EGcCI/EiAlN9!PJk?4$%2e]E"!"68:m1QmCpDH,Y"FWH/q-ELo'eW'a8aj-1GgSU/%_Gp?$bAF8R1t%/[;U$F[1FL__LU+1\>Fh7oAGST`D)4l#`TdY]-jc<%B1IS@@a&f#Zm?'0]nE0C+j4)qXHP@$JHB$7V)FtTj+"V2oVACtK^rN=cdD*)M;V(0VSkJ"n6kp1Tf_sPH*@dTJf^oJ-Y?GEMDSK\%&E_ZEk_G\jQ!*i-"Lj+dAAPgAMWY_V#R-:%@#OL3G\Ml'rpr<*Y.*YE(+Vbo3s6<ePHLq6l^ns;YJ+JdWa`YXAmT#q[J5SUkN#5q%Bq"H+KsKO$d_SbhL<R9A5/7,!?]UJqP)blF01=25I"H7g33-&*>1[G<ho!%4S5iA-;?>)n>uE3Q>/>WV*H[pPQ)a"0>NHc2qjlH]%<g-Q)bLQDoUjQiEpuA7qrXp/O)lX)AlS3ZW''8hFZ?Z,?J./K1B(9stldC6;W`>.HL9L)W8MF0GcZ*3rj=Q)<*7@@>=t8,o$ebto%L&RN(LerUI?9CC-IWJ'XanFd195V@kZ%[e`6=kSP]!bt(6Im_Vhc532lXmY^d-8.0mp:T/j=ce;e^`lpapjd$6YtA^"h/mD[l3,r%?/7M#(pl-hY/CM$ccAFNT[@h=5?*lZ.i`+)-@Lsnm4XI/Qn<?'8LW35$^82uSu#r^Y,8/RDS;5J*->rWf=-h]?%kV6pt.c*la;'j%[G*:$UnF`8A$s;pKej&'ZVZY;mod>_cLqsca+3j%V=^rUf+D)`LT&,<msd%%Bd5gkm>L[1M:He>ZrnolKmgRM^h7#"T>Yf0pG$o0%(&J=6]h#>Df0_]HnhdM&\Z?9FKfq8J*Wl"GrN.H(Jj>Y/oXMR*(@,63^s=2N"DlO&F&5LBejf:2mAG_=*7o>OpZXQVLg(f8ngI^.%fZo>Jk^SDWI]8SQYQ^$,G>k&8eR@-r.21Id4%3RjXSqK[2rtUf6JR#eb=7R)iC4_k>[1(J4buOQ*CiI'$TbJVlVtaNIgl*ejOH!a%U^L]Tr#?4D;M)DBlD5XjSi+4<L[Kd]FkB(4()XL`nNn;Kij2bp&do+qT$j!>iqTZJeO8^'R@d7&+oeQrGP'csi9Jppf17skoNcnf%^DC'AQWc=YYJ%^![MJh<%XLf%o043N\n9^qZ6#ut`X/Q85H&JLfH%cX7Th:Eq(+0E*>>La$XM>-pnSg3BotEqHGJDjj\rS6H(u^U%#bY/1?&K&`lTOqH4]#M:&+b4]AQ;HO'hP:WXnlcB'ATN]WSCP(;:CeS2C-sfEReN^_a^nSF<R/KN:s4#j]Z,Ff$0IJ\#%elbp5Bi%C+,KnGF;0oqm]Yg"2j0Y82E6)kO52Y*N=AB4Pbo'qeo]2ndc%*]6?5[M,u%_Ei9].=K628.\t^Sd3X]BlK<3=q7np9&eo(;C,P,F%ALSY*Km=1'IL,'#X:EV*GUsu+`W5n8Pn99U(@1SShhr/[aLl!iRgbF\jmb+A*;WbEdlZZ<RTYO11R!=]9s;!$P$G?11g[9QR`m]@%RdR+_EBgH#.-J`24uD^Co'tg]\ZB.=<S^`KAD&*.e?'?l.GM^gH8i8%h<<H\UDub\oldMu2sO&:d.;DiZ.r+Em#$G.pFYQHT6i&R%V:[HFPc0=(?7o6-iGuPBW<2(749TXS2Oq=f1P6CtL/G@LmO5s8n,;6Plu!mOKp(ogNCd3i*W6le*m-Q+=B>.XCJr.W+,_G1DVqiT%5u+oPH=jXc3Z:qaDCMrFr24Ku,7PlU1J,XFa.E>-3Zbo&24dI8;0ts@9!Uc+l@b/dI,?Pb2)a@C8Uf0[ht>aecX!)t8\:]p.0NKX%5@h'sT#3Y/?GrPR0IGL1k9J`D6p=+o^k1OmMp!#aFOdDpUX'^MYWD1%NsN]&Y*ZlCrq<']WjnkL7Ku_O[^`/9rc2CD'i*nfbu7AF%U:EJ$.Lo:pG3G/r.?74C+:lM=QANRcdSO\9JdIZcMU9;R:t9WO926h3p"CJVg%:u'/djurf`Ot6-,Y3UR3+7e4+;HQ*ne0U_`:sB%_:[]mN`2.Ue!WSodhr73XaHgd.i1-D.fku\?kMi\VV>5hUI5u/$1K:2kOQE(7.ejq$H6;CNMaiO5!R-cFVJ_k1JQ0f1GSLUkBW$>%h,AkD-?EsCWDq7):/"&89h>?ug$Vn<c8jVLktRiS`j2WH-IUmo=@fB(]U`2#Oh^3Nd2_$uef8]$Uur">n8u^76H>n!MpL(7;.EJm%E\^,2or^Z]cG()XK9R_*"HML=Z_p1"IlKJ-S=[FM[!5V@c,[<lEpM;A[kEG&PI:unb>(T3GC4A;0IAUBA^UjupqYC/RaDfc#XAst%CRng6VWJ.rFC/pmQ'Q>U>A?b??(ctAJkW:pffB_s9"*LHm^7bi['PDr,%2rS>A6b^7*t9umZi=?bE4n,Ku61'b.0XTI'D;).Re;:%ir8<ARUIW>4uqJ1%Tn;>V3Nh]%7bT$_F#rmJN;b5nLQ)k_OG4-KbP1WKnP&C_'C>^XJMu0S'&Xfbj(B#X^7Lh%]hJ/QlT:QUK91J%5\aO6)BfMqS$q%/9\@HaRcMOK-S]5.3W?Ul-Wq4F.VWID6?<LjY.$=>*$j?fKkG`]5"Y.gbHgPF_<7@#c&/C>CV3Y=9GZo=/1$Xn%oCCl]9NOLTj)U.sa&4I-Z4%i+39hql9fTVf;BgLnlF_0s*l1(P3Db=J;D]T1Y2inh"(#l*Qgan<q`Ps'*3+Xn?;+_K.R54f:`M(<%7-pVHX!5&o=>Jl-\YRbraX]n4@_hLd@bhVX/TuH[%HY5McVYkJd9TX@XXNGe$R*"c]LWO()EJ"i?p]LEUX);dJLbfW_F*A715]JG%hBo9AQYl9YfB`.J8r`Z!Q]aCH5jkF%]N`X^5WigCESg!-VI<=3[A'1#Ya:`^]@FQ35DJVlBWHF;m[c.OW^R`:L8V>\c%_")QP-$*%>Q-M5q[rX*,E3pWm!??O[Ts[<rnqr?4$BQ80%H]HfHB$'W/JXi-E\`_5`R^Upt;f*lW1[YQM6KCi`8,hNW:Qn5^/JnQgRnFW#agQ%jB>o:HR`BMn%3n[Vg>@iNnMaUIX8j`?<-sorQ2*PkJO]>l>qY-beHeQrmP"%\5^_>%UX!qkKpVGd>-NKj:EgVlh&Y8QHAe*QZELU%Fg#<K?-u4Jj/_2&1lAYS'jjCW?DYr6OUm8Rf.6c;>*Bi$.)'/e]3QS,?234COD3c:lkXQMklVs.qA$us*4C[;%VsntiHu``<'sj2%)Bg0um0]I$._O!rg\kmdldnr>hd*5o(O!%Io!f+)ippR\>_Ij=gCp*OM;(au;/I9RE-Ao,@#Q[Vab2g,*K;X/7:b2nF#m35Z>ou#%]?fV:^&9X93WeS5;X8(/b_:35k9/F]R5jdJb_:e3$QH\,k<L.rQD,O?WpA-17F8gQjl'ojAIHgtQ^'q9(Zc6&UZoYUMD5dUON'HT%9pR23Kbed0K/52i>on(C"*au=X>F1a>ea#m#aSRK(>go7NAIdj?EGkRGt>*N^!c8u>d9"'*>i#/%/,JWHK8rd6.g+:SJb?!hHft(%c<&UnZMsQj>fPG(ONd9M\_b#<OMZmWZbrcVDV,AI;Cd[njhiW$Dl3i7EeQo?cJV\bb@61(Q"f7[&O4)n(2Y.i=9JelcPo?W%"oP.%5$GmZQG)HuoKLimU-G@69uXL\CYUZAb/4,P^$(/E@iOG8Fpm*G$<l"F/qbk?==_E9Db9#P,386>@Tb7LjrHMR`\qHM8--GY[-;?[%?MbJgX#0]u<q`R+GQ-m^6f#f3gSd?ABO,L2a.(a<7:SQrrVC-/pM+u'$B$3-BeuP&r-X2/Ks#eY/^,VbXSPPOQe.")kMss?EF2ju%>nJ[4@-g.:#+s;Fa&SjgbItV>%TXZ5=2cLlT4*hjVu?JQ^)(-YFsnNL[#&!lm,rpgSi6E!ZGjsc"Q2?2YMt1VGj7:($;N%?&\e9E%[qt=a3^M[\7X!L0M7OuTW042J_/45"7[L(34sE$(jl(oa8rdb/^?2?Ch"QX\IEDckA.unpX()bDFQlVg[quI7ZL)&jpUV.*"bC3$%8B)_qjq;(H=Doi,*qO]C%tPI'`p#O0Ql1"bWWXjL8'HeX@WOq5Wad>2i00KQ^%@0%(WR![Q``0J`D"UO_pG]86hCVLjmjBT4V`<t%ch][DpC5hkEk%;"F'`N,koloQ*4e!K6@Zl6jRRXVk,J1=g':k8\pnu<0)+Jhc#9aJk*]g+7GQ%F[;UWf.9EInE12)?F'@M8X)nS.%,m&shFDF[1\3RSmf7hkeJF=:l/Dk-3+V4=tYKLH!r,8AISWEh%`=$<$7dI2)9OA4&+Bl<-"B$FEB<D%L,gY1DUMsn)6h;f$kfD#F%ddJ-\&cNPPA3>!n^</!`8d+8<%>%S\$gWD.`0-e82.!&?hJ]aDfDkD9ant#E.(8D>O=$t+iHnWRqR*uYN!k^+F\:Y(ET>,Jl1Pgd%@/Ouj<I2XeeU)puGK]:;A3SnK&,pld5UkA6a*JS##upM-c!f=@;1#/);VpLD7,6n#$dn1R-ukZD0s<qXUin<56l\YN(Ue]#S,k\M%_DYYVa:0]k.qmJ)\!6]Wh_&X=p;JG_e8U/$N@J,SRDYAOMCA*tDuTTjJ6@dLNd)";'kehkH@)>0Pr.X&A5;"*VJBFlo]I$69aNf,%N6W?n2,.0)E@;I!nMr)NYFO3?UNl['^30JKp@&%Na+*h*qu?HC^\lEehu;O%J,>R^q84<Spn*'5oC)_@Dnl8>T>1En%tFTUDu]b6%gM_T;b?t;>gHU/e5NeAOJ,\3kJ,dPrs7Z?!^]1LPra/LI,LQFMJ,IpuoH4)%rrH*A;<%~>%AI9_PrivateDataEnd